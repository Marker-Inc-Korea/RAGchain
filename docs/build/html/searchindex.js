Search.setIndex({
    "docnames": ["RAGchain", "RAGchain.DB", "RAGchain.benchmark", "RAGchain.benchmark.answer", "RAGchain.benchmark.dataset", "RAGchain.benchmark.extra", "RAGchain.benchmark.retrieval", "RAGchain.pipeline", "RAGchain.preprocess", "RAGchain.preprocess.loader", "RAGchain.preprocess.text_splitter", "RAGchain.reranker", "RAGchain.reranker.importance", "RAGchain.reranker.llm", "RAGchain.reranker.pygaggle", "RAGchain.reranker.pygaggle.model", "RAGchain.reranker.tart", "RAGchain.reranker.time", "RAGchain.reranker.upr", "RAGchain.retrieval", "RAGchain.schema", "RAGchain.utils", "RAGchain.utils.compressor", "RAGchain.utils.embed", "RAGchain.utils.linker", "RAGchain.utils.vectorstore", "RAGchain.utils.websearch", "index", "modules"],
    "filenames": ["RAGchain.rst", "RAGchain.DB.rst", "RAGchain.benchmark.rst", "RAGchain.benchmark.answer.rst", "RAGchain.benchmark.dataset.rst", "RAGchain.benchmark.extra.rst", "RAGchain.benchmark.retrieval.rst", "RAGchain.pipeline.rst", "RAGchain.preprocess.rst", "RAGchain.preprocess.loader.rst", "RAGchain.preprocess.text_splitter.rst", "RAGchain.reranker.rst", "RAGchain.reranker.importance.rst", "RAGchain.reranker.llm.rst", "RAGchain.reranker.pygaggle.rst", "RAGchain.reranker.pygaggle.model.rst", "RAGchain.reranker.tart.rst", "RAGchain.reranker.time.rst", "RAGchain.reranker.upr.rst", "RAGchain.retrieval.rst", "RAGchain.schema.rst", "RAGchain.utils.rst", "RAGchain.utils.compressor.rst", "RAGchain.utils.embed.rst", "RAGchain.utils.linker.rst", "RAGchain.utils.vectorstore.rst", "RAGchain.utils.websearch.rst", "index.rst", "modules.rst"],
    "titles": ["RAGchain package", "RAGchain.DB package", "RAGchain.benchmark package", "RAGchain.benchmark.answer package", "RAGchain.benchmark.dataset package", "RAGchain.benchmark.extra package", "RAGchain.benchmark.retrieval package", "RAGchain.pipeline package", "RAGchain.preprocess package", "RAGchain.preprocess.loader package", "RAGchain.preprocess.text_splitter package", "RAGchain.reranker package", "RAGchain.reranker.importance package", "RAGchain.reranker.llm package", "RAGchain.reranker.pygaggle package", "RAGchain.reranker.pygaggle.model package", "RAGchain.reranker.tart package", "RAGchain.reranker.time package", "RAGchain.reranker.upr package", "RAGchain.retrieval package", "RAGchain.schema package", "RAGchain.utils package", "RAGchain.utils.compressor package", "RAGchain.utils.embed package", "RAGchain.utils.linker package", "RAGchain.utils.vectorstore package", "RAGchain.utils.websearch package", "Welcome to RAGchain\u2019s documentation!", "RAGchain"],
    "terms": {
        "db": [0, 2, 4, 7, 19, 21, 24, 28],
        "submodul": [0, 8, 28],
        "base": [0, 3, 5, 6, 8, 9, 12, 13, 15, 16, 17, 18, 20, 21, 23, 28],
        "basedb": [0, 1, 4, 7, 19, 21],
        "creat": [0, 1, 7, 16, 19, 20, 23, 24, 26],
        "create_or_load": [0, 1],
        "db_type": [0, 1, 19, 20],
        "fetch": [0, 1, 19],
        "get_db_origin": [0, 1],
        "load": [0, 1, 7, 8, 9, 21, 24],
        "save": [0, 1, 7, 19],
        "search": [0, 1, 4, 5, 19, 20, 21, 26, 27],
        "mongo_db": [0, 19, 28],
        "mongodb": [0, 1],
        "set_db": [0, 1],
        "pickle_db": [0, 21, 28],
        "pickledb": [0, 1, 7, 21],
        "benchmark": [0, 28],
        "retriev": [0, 1, 2, 4, 7, 11, 13, 14, 16, 18, 20, 21, 22, 24, 28],
        "main": [],
        "metric": [0, 2, 4, 5, 20],
        "util": [0, 28],
        "cos_sim": [],
        "dot_scor": [],
        "download_and_unzip": [],
        "download_url": [],
        "unzip": [],
        "write_to_json": [],
        "write_to_tsv": [],
        "llm": [0, 7, 11, 19, 21, 22],
        "basellm": [7, 21],
        "add_chat_histori": [],
        "ask": [],
        "clear_chat_histori": [],
        "gener": [3, 4],
        "generate_chat": [],
        "stream_end_token": [],
        "basic": [0, 28],
        "basicllm": [],
        "chat_histori": [],
        "chat_offset": [],
        "get_messag": [],
        "retrieved_passag": [],
        "rerank": [0, 21, 22, 28],
        "rerankllm": [],
        "viscond": [0, 21, 28],
        "viscondellm": [],
        "strategyqa_prompt": [0, 7],
        "pipelin": [0, 2, 4, 28],
        "basepipelin": [],
        "run": [0, 7, 16, 21, 26],
        "basicdatasetpipelin": [],
        "basicingestpipelin": [0, 7],
        "basicrunpipelin": [0, 7],
        "selector": 19,
        "moduleselector": 19,
        "get": [7, 9, 21, 22, 23],
        "select": 22,
        "select_db": [],
        "select_file_load": [],
        "select_llm": [],
        "select_retriev": [],
        "select_text_splitt": [],
        "preprocess": [0, 2, 4, 7, 28],
        "loader": [0, 7, 8, 21],
        "dataset_load": [0, 8],
        "excel_load": [0, 8],
        "file_load": [0, 7, 8],
        "hwp_loader": [0, 8],
        "mathpix_markdown_load": [0, 8],
        "nougat_pdf_load": [0, 8],
        "pdf_link_load": [0, 8],
        "text_splitt": [0, 7, 8],
        "rank_gpt": [0, 11],
        "pygaggl": [0, 11],
        "monot5": [0, 11],
        "transform": [0, 1, 4, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22],
        "tart": [0, 11],
        "modeling_enc_t5": [0, 11],
        "tokenization_enc_t5": [0, 11],
        "upr": [0, 11],
        "basererank": [0, 7, 11, 12, 13, 14, 16, 17, 18],
        "rerank_sliding_window": [11, 13],
        "baseretriev": [0, 2, 4, 7, 19],
        "create_db": [0, 19],
        "duplicate_check": [0, 19],
        "fetch_data": [0, 19],
        "fetch_data_from_db_origin": [0, 19],
        "fetch_each_db": [0, 19],
        "ingest": [0, 2, 4, 7, 19],
        "is_creat": [0, 19],
        "retrieve_id": [0, 2, 19],
        "retrieve_id_with_scor": [0, 2, 19],
        "retrieve_with_filt": [0, 19],
        "search_data": [0, 19],
        "search_data_from_db_origin": [0, 19],
        "search_each_db": [0, 19],
        "bm25_retriev": [0, 28],
        "bm25retriev": [0, 7, 19],
        "load_data": [0, 19],
        "persist": [0, 19],
        "hybrid": [0, 28],
        "hybridretriev": [0, 19],
        "min_max_norm": [0, 19],
        "retrieve_id_with_scores_parallel": [0, 19],
        "hyde": [0, 28],
        "hyderetriev": [0, 19],
        "basic_system_prompt": [0, 19],
        "make_prompt": [0, 20],
        "vectordb_retriev": [0, 28],
        "vectordbretriev": [0, 19],
        "schema": [0, 21, 28],
        "db_origin": [0, 19, 28],
        "dborigin": [0, 1, 20],
        "db_path": [0, 19, 20],
        "to_dict": [0, 20],
        "passag": [0, 1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 26, 28],
        "filepath": [0, 1, 9, 19, 20],
        "id": [0, 1, 2, 6, 14, 16, 19, 20, 24],
        "is_exactly_sam": [0, 20],
        "metadata_etc": [0, 1, 19, 20],
        "next_passage_id": [0, 20],
        "previous_passage_id": [0, 20],
        "to_docu": [0, 20],
        "emb": [0, 19, 21, 25],
        "delete_embed": [],
        "embeddingfactori": [0, 21],
        "linker": [0, 1, 21],
        "redisdbsingleton": 24,
        "vectorstor": [0, 19, 21],
        "chroma": [0, 21],
        "pinecon": [0, 21],
        "evidence_extractor": [0, 28],
        "evidenceextractor": [0, 21],
        "extract": [0, 21],
        "file_cach": [0, 28],
        "filecach": [0, 21],
        "delete_dupl": [0, 21],
        "query_decompos": [0, 28],
        "querydecomposit": [0, 7, 21],
        "decompos": [0, 7, 21],
        "decompose_prompt": [0, 21],
        "filecheck": [0, 21],
        "check_typ": [0, 21],
        "is_exist": [0, 21],
        "stoppingcriteriasub": [],
        "set_api_bas": [0, 21],
        "slice_stop_word": [0, 21],
        "text_modifi": [0, 21],
        "class": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "abc": [1, 2, 3, 4, 6, 7, 10, 11, 19, 22, 25, 26],
        "abstract": [1, 2, 3, 4, 6, 7, 10, 11, 14, 19, 22, 24, 25, 26],
        "arg": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24],
        "kwarg": [1, 2, 4, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26],
        "properti": [1, 3, 6, 10, 11, 19, 21, 22, 26],
        "str": [1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "list": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26],
        "uuid": [1, 2, 19, 20, 24],
        "none": [1, 2, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26],
        "from": [1, 2, 5, 6, 7, 9, 10, 13, 14, 16, 17, 19, 20, 21, 22, 25, 26],
        "us": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "filter": [1, 19],
        "dict": [1, 6, 9, 13, 16, 19, 20, 22, 24, 25, 26],
        "thi": [1, 4, 5, 7, 9, 10, 11, 13, 14, 16, 18, 19, 20, 21, 22, 23, 26, 27],
        "function": [1, 13, 16, 20, 21],
        "can": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 16, 19, 20, 21, 23, 24, 25, 26, 27],
        "you": [1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 16, 19, 20, 21, 22, 23, 25, 26, 27],
        "add": [1, 5, 20],
        "more": [1, 5, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26],
        "condit": [1, 19],
        "i": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "an": [1, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26],
        "implicit": 1,
        "AND": 1,
        "oper": [1, 24],
        "mongo_url": [1, 19],
        "db_name": [1, 19],
        "collection_nam": [1, 19, 25],
        "With": [21, 22],
        "": [4, 7, 10, 14, 16, 20, 21, 22, 26],
        "find": 21,
        "param": [1, 2, 4, 9, 12, 17, 19, 20, 21, 26],
        "filter_dict": 19,
        "queri": [0, 2, 4, 6, 11, 13, 14, 15, 16, 18, 19, 20, 21, 26],
        "return": [1, 2, 4, 7, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26],
        "result": [0, 2, 4, 6, 9, 19, 20, 21],
        "save_path": [1, 7, 19, 21],
        "which": [6, 7, 9, 10, 16, 19, 20, 21, 26],
        "match": 19,
        "all": [4, 7, 9, 16, 19, 21, 22, 25],
        "valu": [4, 6, 7, 16, 19, 20, 23, 26],
        "correspond": [],
        "kei": [1, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26],
        "when": [1, 4, 5, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24],
        "exist": [1, 7, 21, 24],
        "empti": [],
        "basic_retrieval_evalu": [2, 6],
        "strategyqa": [4, 21],
        "stretagyqa_retrieval_evalu": [2, 6],
        "apfactori": [],
        "retrieval_metric_funct": [2, 3, 6],
        "baseretrievalmetricfactori": [],
        "eval": [2, 3, 6],
        "metric_nam": [2, 3, 6],
        "cgfactori": [],
        "dcgfactori": [],
        "exactlymatchfactori": [],
        "f1factori": [],
        "holefactori": [],
        "idcgfactori": [],
        "inddcgfactori": [],
        "indidcgfactori": [],
        "ndcgfactori": [],
        "precisionfactori": [],
        "rrfactori": [],
        "recallfactori": [],
        "topkaccuracyfactori": [],
        "tensor": 15,
        "b": 16,
        "comput": 16,
        "cosin": 25,
        "similar": [2, 10, 19],
        "j": 10,
        "matrix": [],
        "re": [],
        "dot": 9,
        "product": [],
        "dot_prod": [],
        "url": [9, 21],
        "out_dir": [],
        "chunk_siz": 10,
        "int": [1, 2, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 25, 26],
        "1024": [],
        "download": [9, 14],
        "progress": [],
        "bar": [],
        "tqdm": [],
        "http": [9, 13, 14, 16, 18, 19, 21, 26],
        "stackoverflow": [],
        "com": [9, 13, 14, 16, 18, 26],
        "question": [2, 3, 4, 7, 13, 18, 19, 20, 21],
        "15644964": [],
        "python": 10,
        "local": [1, 24],
        "path": 9,
        "file": [1, 6, 7, 9, 19, 20, 21, 24, 27],
        "option": [1, 4, 9, 14, 16, 19, 20],
        "chunk": [10, 21, 24],
        "default": [4, 7, 9, 16, 19, 20, 21, 25, 26],
        "zip_fil": [],
        "output_fil": [],
        "data": [1, 4, 7, 9, 19, 20, 21, 24],
        "qrel": 6,
        "float": [2, 3, 5, 6, 7, 12, 14, 17, 18, 19, 20, 21, 25],
        "k_valu": 6,
        "paramet": [1, 3, 6, 7, 9, 11, 12, 13, 16, 17, 18, 20, 21, 22],
        "The": [1, 4, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26],
        "dictionari": [6, 20],
        "query_id": 6,
        "doc_id": 6,
        "relev": [6, 7, 12, 17, 19, 21],
        "score": [0, 2, 6, 7, 11, 12, 14, 17, 19, 20, 22],
        "k": 6,
        "evalu": [0, 2, 4, 5, 7, 21],
        "should": [1, 4, 6, 16, 20, 21, 26, 27],
        "done": 6,
        "differ": 6,
        "solut": [3, 6],
        "pred": [3, 6],
        "metrics_factori": [],
        "articl": 21,
        "geva2021strategyqa": [],
        "titl": [7, 14, 20, 21],
        "did": 7,
        "aristotl": [],
        "laptop": [],
        "A": [1, 4, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26],
        "answer": [0, 2, 7, 19],
        "reason": 4,
        "strategi": [],
        "author": 21,
        "geva": [],
        "mor": [],
        "khashabi": [],
        "daniel": [],
        "segal": [],
        "elad": [],
        "khot": [],
        "tushar": [],
        "roth": [],
        "dan": [],
        "berant": [],
        "jonathan": [],
        "journal": 21,
        "transact": [],
        "associ": [],
        "linguist": [],
        "tacl": [],
        "year": 21,
        "2021": 21,
        "note": 20,
        "github": [9, 13, 14, 16, 18, 21],
        "eladseg": [],
        "blob": 14,
        "dev": [],
        "json": 24,
        "1": [4, 6, 7, 12, 16, 17, 21],
        "reciproc": 6,
        "rank": [6, 11, 13, 14, 16, 18],
        "rr": [2, 6],
        "first": [1, 6, 7, 9, 10, 12, 17, 19, 20, 21, 26],
        "item": [6, 13],
        "mean": 6,
        "whole": [6, 21],
        "mrr": 6,
        "stream": [],
        "bool": [1, 2, 4, 7, 9, 10, 14, 15, 16, 18, 20, 21, 22, 26],
        "fals": [1, 2, 4, 10, 13, 14, 16, 18, 20, 21, 22, 24, 26],
        "run_retriev": [],
        "true": [2, 4, 7, 9, 10, 15, 20, 21],
        "tupl": [1, 2, 7, 9, 10, 15, 18, 19],
        "model": [11, 13, 14, 16, 18, 19, 20, 21, 22],
        "openai": [7, 13, 21, 23],
        "api": [9, 21, 26],
        "classmethod": 20,
        "prompt": [0, 7, 21, 22, 28],
        "stream_func": [],
        "callabl": [20, 25],
        "If": [2, 3, 4, 7, 9, 20, 21],
        "each": [4, 7, 9, 19, 20, 21, 22],
        "respons": 13,
        "And": [5, 12, 17, 19, 21],
        "cl": [],
        "end": 20,
        "messag": [0, 7, 13, 20],
        "top_k": [2, 7, 19],
        "5": [2, 4, 5, 7, 12, 13, 19, 21, 26],
        "endofstream": [],
        "model_nam": [13, 14, 18, 22],
        "gpt": [13, 21],
        "3": [7, 13, 21, 22],
        "turbo": 13,
        "api_bas": [13, 21],
        "prompt_func": [],
        "static": [2, 9, 14, 19, 20, 24],
        "retrieve_s": 7,
        "10": [13, 19, 21, 26, 27],
        "use_passage_count": 7,
        "window_s": [10, 13],
        "code": [13, 14, 21],
        "inspir": [19, 21],
        "paper": [4, 9, 21],
        "its": [21, 25],
        "repo": [13, 21],
        "inproceed": 21,
        "1007": 21,
        "978": 21,
        "031": 21,
        "28238": 21,
        "6_44": 21,
        "pereira": 21,
        "jayr": 21,
        "fidalgo": 21,
        "robson": 21,
        "lotufo": 21,
        "roberto": 21,
        "nogueira": 21,
        "rodrigo": 21,
        "multi": 21,
        "document": [7, 9, 10, 14, 15, 20, 21],
        "qa": [4, 21],
        "nbsp": 21,
        "neural": 21,
        "2023": [21, 27],
        "isbn": 21,
        "28237": 21,
        "9": 21,
        "publish": 21,
        "springer": 21,
        "verlag": 21,
        "address": [4, 21],
        "berlin": 21,
        "heidelberg": 21,
        "doi": 21,
        "org": [19, 21],
        "booktitl": 21,
        "advanc": 21,
        "inform": [7, 10, 13, 21, 22],
        "45th": 21,
        "european": 21,
        "confer": 21,
        "ecir": 21,
        "dublin": 21,
        "ireland": 21,
        "april": 21,
        "2": [5, 7, 19, 21, 22],
        "6": 21,
        "proceed": 21,
        "part": 21,
        "ii": 21,
        "page": [9, 21, 27],
        "534": 21,
        "543": 21,
        "numpag": 21,
        "locat": 21,
        "text": [7, 9, 10, 11, 13, 14, 15, 20, 21],
        "davinci": [],
        "003": [],
        "decompose_model_nam": [],
        "50": [5, 7, 10],
        "For": [7, 14, 19, 26],
        "exampl": [7, 14, 19, 21, 22, 26],
        "explan": 7,
        "just": 7,
        "ye": 7,
        "n": [7, 21, 24],
        "san": 7,
        "tropez": 7,
        "song": 7,
        "fourth": 7,
        "track": [4, 7],
        "album": 7,
        "meddl": 7,
        "band": 7,
        "pink": 7,
        "floyd": 7,
        "wa": [7, 11, 13, 14, 16, 18],
        "one": [3, 7, 10, 16, 19, 21],
        "sever": 7,
        "consid": 7,
        "best": 7,
        "echo": 7,
        "french": 7,
        "riviera": 7,
        "known": 7,
        "c\u00f4te": 7,
        "d": [7, 20, 21],
        "azur": [7, 26],
        "kot": 7,
        "da\u02c8zy\u0281": 7,
        "occitan": 7,
        "c\u00f2sta": 7,
        "\u02c8k\u0254st\u0254": 7,
        "da\u02c8zy\u027e": 7,
        "liter": [7, 20],
        "translat": 7,
        "coast": 7,
        "mediterranean": 7,
        "coastlin": 7,
        "southeast": 7,
        "corner": 7,
        "franc": 7,
        "There": [7, 21],
        "offici": 7,
        "boundari": 7,
        "usual": 7,
        "extend": 7,
        "cassi": 7,
        "toulon": 7,
        "saint": 7,
        "west": 7,
        "menton": 7,
        "itali": 7,
        "border": 7,
        "east": 7,
        "where": [7, 10],
        "italian": 7,
        "join": 7,
        "entir": 7,
        "within": [4, 7, 16],
        "provenc": 7,
        "alp": 7,
        "r\u00e9gion": 7,
        "sud": 7,
        "region": 7,
        "princip": 7,
        "monaco": 7,
        "semi": 7,
        "enclav": 7,
        "surround": 7,
        "three": 7,
        "side": 7,
        "front": 7,
        "moon": 7,
        "jae": 7,
        "also": [1, 7],
        "promis": 7,
        "transpar": 7,
        "hi": 7,
        "presid": 7,
        "move": 7,
        "presidenti": 7,
        "resid": 7,
        "palati": 7,
        "isol": 7,
        "blue": 7,
        "hous": 7,
        "govern": 7,
        "complex": 7,
        "downtown": 7,
        "seoul": 7,
        "4": [7, 9, 21],
        "u": [7, 21],
        "\u02ccs\u00e6n": 7,
        "tro\u028a\u02c8pe\u026a": 7,
        "troh": 7,
        "pai": 7,
        "s\u025b": 7,
        "t\u0281\u0254pe": 7,
        "sant": 7,
        "tropetz": 7,
        "pronounc": 7,
        "t": [1, 2, 4, 7, 9, 10, 21],
        "t\u0280u\u02c8p": 7,
        "town": 7,
        "68": 7,
        "kilometr": 7,
        "42": [4, 5, 7],
        "mile": 7,
        "nice": 7,
        "100": [7, 10, 13, 16],
        "62": 7,
        "marseil": 7,
        "var": 7,
        "depart": 7,
        "occitania": 7,
        "southern": 7,
        "have": [2, 3, 7, 19, 21],
        "about": [7, 20],
        "accord": [4, 7, 23],
        "further": 7,
        "support": [1, 5, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "state": [4, 7, 16],
        "therefor": [7, 16],
        "baseload": [7, 9],
        "retrieval_typ": [],
        "ani": [9, 14, 16, 20, 21, 22, 25, 26],
        "text_splitter_typ": [],
        "recursive_text_splitt": [],
        "chunk_overlap": 10,
        "500": [5, 19],
        "ignore_existed_fil": 7,
        "repres": [1, 11, 13, 14, 16, 18, 21],
        "handl": 7,
        "process": [4, 7],
        "databas": [1, 4, 7, 9],
        "system": [7, 21],
        "attribut": 1,
        "langchain": [7, 10, 21, 25, 26],
        "document_load": [7, 21],
        "instanc": [16, 20, 24],
        "want": [4, 9, 20, 21],
        "type": [1, 4, 10, 11, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 26],
        "configur": [19, 22, 26],
        "splitter": [7, 10],
        "flag": [],
        "indic": [],
        "whether": [16, 20],
        "ignor": [4, 16],
        "alreadi": [1, 2, 4, 16],
        "method": [1, 4, 9, 10, 16, 19, 21, 26],
        "target_dir": [7, 9],
        "llm_type": [],
        "basic_llm": [],
        "module_nam": [],
        "object": [1, 4, 5, 7, 9, 11, 13, 14, 15, 16, 18, 20, 21, 23, 24],
        "name": [20, 22],
        "kostrategyqaload": [8, 9],
        "excelload": [8, 9],
        "lazy_load": [8, 9],
        "fileload": [7, 8, 9],
        "hwploader": [8, 9],
        "async_request": [8, 9],
        "mathpixmarkdownload": [8, 9],
        "split_sect": [8, 9],
        "split_tabl": [8, 9],
        "nougatpdfload": [8, 9],
        "pdflinkload": [8, 9],
        "valid_url": [8, 9],
        "basetextsplitt": [7, 8, 10],
        "split_docu": [8, 10],
        "recursivetextsplitt": [7, 8, 10],
        "kostrategyqa": 9,
        "dataset": [0, 2, 5, 9, 21],
        "huggingfac": [9, 10, 14],
        "via": 9,
        "internet": 9,
        "sheet_nam": 9,
        "iter": [9, 15],
        "lazi": 9,
        "hwp_host_url": 9,
        "filter_ext": 9,
        "target": 9,
        "directori": [7, 9],
        "onli": [2, 3, 4, 5, 9, 12, 13, 17, 21, 25],
        "given": [1, 7, 9, 19, 21, 22],
        "extens": 9,
        "element": [1, 9],
        "must": [4, 9, 12, 17, 19, 20, 21],
        "contain": [9, 10, 14, 21, 27],
        "prefix": 9,
        "retry_connect": 9,
        "hwp": 9,
        "convert": [9, 20],
        "textload": 21,
        "async": 9,
        "split": [7, 9, 10],
        "tabl": [9, 24],
        "mathpix": 9,
        "markdown": [9, 10],
        "odd": 9,
        "index": [9, 10, 20, 21, 25, 27],
        "without": [2, 9, 19, 24],
        "even": [9, 14],
        "file_path": [9, 21],
        "nougat_host": 9,
        "basepdfload": 9,
        "section": 9,
        "start": [9, 20],
        "number": [4, 7, 9, 13, 21],
        "stop": 9,
        "link": [9, 20, 24],
        "separ": [9, 10, 21],
        "keep_separ": 10,
        "llmrerank": [11, 13],
        "find_passag": [11, 13],
        "make_item": [11, 13],
        "make_passag": [11, 13],
        "safeopenai": [11, 13],
        "chat": [11, 13],
        "clean_respons": [11, 13],
        "create_permutation_instruct": [11, 13],
        "get_post_prompt": [11, 13],
        "get_prefix_prompt": [11, 13],
        "max_token": [11, 13],
        "num_tokens_from_messag": [11, 13],
        "permutation_pipelin": [11, 13],
        "receive_permut": [11, 13],
        "remove_dupl": [11, 13],
        "run_llm": [11, 13],
        "sliding_window": [11, 13],
        "decod": [11, 14],
        "token": [10, 11, 13, 14, 16, 19, 22],
        "rescor": [11, 14],
        "monot5rerank": [7, 11, 14],
        "get_model": [11, 14],
        "get_prediction_token": [11, 14],
        "get_token": [11, 14],
        "enct5forsequenceclassif": [11, 16],
        "deparallel": [11, 16],
        "forward": [11, 16],
        "get_encod": [11, 16],
        "get_input_embed": [11, 16],
        "parallel": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "set_input_embed": [11, 16],
        "train": [2, 5, 11, 16, 21],
        "tartrerank": [11, 16],
        "enct5token": [11, 16],
        "build_inputs_with_special_token": [11, 16],
        "create_token_type_ids_from_sequ": [11, 16],
        "get_special_tokens_mask": [11, 16],
        "uprrerank": [11, 18],
        "calculate_likelihood": [11, 18],
        "specif": [11, 13, 14, 16, 18],
        "algorithm": [11, 13, 14, 16, 18, 19, 21, 22],
        "slide": 13,
        "window": [9, 13],
        "input": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26],
        "size": [4, 13, 14, 25],
        "limit": 13,
        "like": [1, 4, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 24, 27],
        "origin": [1, 13, 14, 19, 24],
        "rankgpt": 13,
        "sunnweiwei": 13,
        "modifi": 13,
        "fit": 13,
        "framework": [7, 10, 13],
        "target_passag": 13,
        "original_passag": 13,
        "littl": [13, 21],
        "bit": 13,
        "integr": 13,
        "pleas": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "go": [10, 13],
        "need": [2, 4, 9, 13, 16, 21, 26],
        "start_id": 13,
        "proxi": 13,
        "return_text": 13,
        "reduce_length": 13,
        "rank_start": 13,
        "0": [5, 7, 10, 12, 13, 14, 16, 17, 19, 20],
        "rank_end": 13,
        "num": 13,
        "0301": 13,
        "api_kei": 13,
        "permut": 13,
        "20": 13,
        "step": 13,
        "greedy_decod": [14, 15],
        "duoquerydocumentbatch": [14, 15],
        "doc_pair": [14, 15],
        "output": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26],
        "querydocumentbatch": [14, 15],
        "querydocumentbatchtoken": [14, 15],
        "traverse_duo_query_docu": [14, 15],
        "traverse_query_docu": [14, 15],
        "t5batchtoken": [14, 15],
        "tokenizerencodemixin": [14, 15],
        "encod": [14, 15, 21],
        "tokenizer_kwarg": [14, 15],
        "itself": 14,
        "potenti": 14,
        "other": [1, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22],
        "metadata": [0, 1, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25],
        "take": [4, 14, 16, 20],
        "non": [14, 21],
        "destruct": 14,
        "e": [14, 21, 26],
        "doe": [1, 14, 16, 24],
        "alter": 14,
        "sort": 14,
        "respect": 14,
        "map": [14, 15, 16, 20],
        "unspecifi": 14,
        "length": [14, 15, 20],
        "principl": 14,
        "could": 14,
        "full": 14,
        "paragraph": [4, 9, 14],
        "short": 14,
        "phrase": 14,
        "addit": [1, 14],
        "annot": [1, 10, 11, 14, 19, 21, 22, 26],
        "might": [5, 14],
        "bm25": [0, 7, 14, 19, 28],
        "initi": 14,
        "stage": 14,
        "castorini": 14,
        "3b": 14,
        "msmarco": [0, 2, 14],
        "10k": 14,
        "use_amp": 14,
        "token_fals": 14,
        "token_tru": 14,
        "master": 14,
        "py": 14,
        "pretrained_model_name_or_path": 14,
        "t5forconditionalgener": 14,
        "devic": 14,
        "batch_siz": [14, 15, 25],
        "8": [14, 19],
        "implement": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "pretrainedmodel": 15,
        "input_id": [15, 16],
        "attention_mask": [15, 16],
        "return_last_logit": 15,
        "torch": [15, 16],
        "pretrainedtoken": 15,
        "pattern": 15,
        "batch_input": 15,
        "string": [1, 15, 19, 20, 26],
        "config": [0, 1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26],
        "t5config": 16,
        "dropout": 16,
        "t5pretrainedmodel": 16,
        "head_mask": 16,
        "inputs_emb": 16,
        "label": [16, 19],
        "output_attent": 16,
        "output_hidden_st": 16,
        "return_dict": 16,
        "defin": 16,
        "perform": [4, 5, 10, 16],
        "everi": 16,
        "call": 16,
        "overridden": 16,
        "subclass": [1, 16, 21, 26],
        "although": 16,
        "recip": 16,
        "pass": [2, 16],
        "afterward": 16,
        "instead": [10, 16],
        "sinc": 16,
        "former": 16,
        "care": 16,
        "regist": 16,
        "hook": 16,
        "while": 16,
        "latter": 16,
        "silent": 16,
        "them": [5, 16, 22],
        "embed": [16, 19, 21, 23, 25],
        "nn": 16,
        "vocabulari": 16,
        "hidden": 16,
        "device_map": [16, 22],
        "new_embed": 16,
        "set": [1, 2, 4, 9, 16, 19, 20, 21, 22, 25, 26],
        "instruct": 16,
        "vocab_fil": 16,
        "bos_token": 16,
        "eos_token": 16,
        "unk_token": 16,
        "unk": 16,
        "pad_token": 16,
        "pad": 16,
        "extra_id": 16,
        "additional_special_token": 16,
        "sp_model_kwarg": 16,
        "t5token": 16,
        "token_ids_0": 16,
        "token_ids_1": 16,
        "build": 16,
        "sequenc": [16, 22],
        "pair": 16,
        "classif": 16,
        "task": [16, 21],
        "concaten": 16,
        "ad": 16,
        "special": 16,
        "ha": [4, 16],
        "follow": [12, 16, 17],
        "format": [1, 9, 16, 20],
        "singl": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "x": 16,
        "second": [1, 7, 10, 16, 21],
        "glossari": 16,
        "appropri": 16,
        "mask": 16,
        "two": 16,
        "t5": [16, 18],
        "make": [4, 7, 16, 18, 20],
        "zero": [16, 19, 21],
        "already_has_special_token": 16,
        "prepare_for_model": 16,
        "integ": 16,
        "rang": [1, 9, 12, 16, 17, 19],
        "larg": [4, 18],
        "prefix_prompt": 18,
        "suffix_prompt": 18,
        "write": [18, 19],
        "use_bf16": 18,
        "use_gpu": 18,
        "shard_siz": 18,
        "16": [18, 27],
        "context": 18,
        "cant": 19,
        "import": [0, 1, 7, 11, 19, 20, 21, 22],
        "becaus": [4, 5, 19],
        "circular": 19,
        "db_origin_list": 19,
        "check": [19, 21],
        "duplic": [19, 20, 21],
        "target_id": 19,
        "final_db_origin": 19,
        "check_dict": 19,
        "multi_num": 19,
        "retrieve_range_mult": 19,
        "max_trial": 19,
        "count": 19,
        "multipli": 19,
        "fail": 19,
        "enough": 19,
        "max": 19,
        "trial": 19,
        "tokenizer_nam": [10, 11, 19],
        "gpt2": [10, 11, 19],
        "structur": [9, 19],
        "look": 19,
        "2d": [10, 19],
        "passage_id": [19, 25],
        "weight": [12, 19],
        "p": 19,
        "cc": 19,
        "rrf_k": 19,
        "60": 19,
        "arr": 19,
        "ndarrai": [19, 21],
        "seri": 19,
        "system_prompt": [19, 21],
        "model_kwarg": [],
        "vectordb": 19,
        "serializ": 20,
        "store": [1, 19, 20, 24, 25],
        "delete_embeddings_vectordb": [],
        "delete_sparse_retrieval_index": [],
        "embeddingtyp": [21, 23],
        "contriev": [21, 23],
        "kosimcs": [21, 23],
        "ko_sroberta_multitask": [21, 23],
        "multilingual_e5": [21, 23],
        "connection_check": [21, 24],
        "flush_db": [21, 24],
        "get_json": [21, 24],
        "slimvectorstor": [21, 25],
        "add_passag": [21, 25],
        "chromaslim": [21, 25],
        "pineconeslim": [21, 25],
        "fragment": 21,
        "__init__": [],
        "self": 21,
        "usag": 22,
        "lorem": 21,
        "ipsum": 21,
        "dolor": 21,
        "sit": 21,
        "amet": 21,
        "consectetur": 21,
        "adipisc": 21,
        "elit": 21,
        "sed": 21,
        "do": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "eiusmod": 21,
        "tempor": 21,
        "incididunt": 21,
        "ut": 21,
        "labor": 21,
        "et": 21,
        "magna": 21,
        "aliqua": 21,
        "what": [7, 21],
        "extractor": 21,
        "print": [7, 21],
        "keyword": [],
        "argument": [],
        "custom": 21,
        "piec": 21,
        "sub": 21,
        "decomposit": 21,
        "hamlet": 21,
        "common": 21,
        "imdb": 21,
        "than": 21,
        "comedi": 21,
        "error": 21,
        "how": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "mani": [4, 21],
        "ar": [4, 5, 9, 20, 21],
        "bird": 21,
        "badminton": 21,
        "legal": 21,
        "licens": 21,
        "child": 21,
        "drive": 21,
        "merced": 21,
        "benz": 21,
        "emploi": 21,
        "minimum": 21,
        "ag": 21,
        "someon": 21,
        "cucumb": 21,
        "same": [7, 9, 21],
        "textur": 21,
        "hydrogen": 21,
        "atom": 21,
        "squar": 21,
        "exce": 21,
        "spice": 21,
        "girl": 21,
        "250": [],
        "temperatur": [],
        "file_typ": 21,
        "encount": [],
        "stoppingcriteria": [],
        "input_str": 21,
        "stop_word": 21,
        "modify_word": 21,
        "word": 21,
        "underbar": 21,
        "_": 21,
        "warn": 24,
        "deprec": [],
        "we": [2, 4, 5, 10, 21, 24],
        "proper": 26,
        "wai": [],
        "delet": [0, 2, 19, 21],
        "etc": [],
        "todo": [],
        "featur": 10,
        "118": [],
        "embed_typ": 23,
        "device_typ": 23,
        "cuda": [22, 23],
        "enum": [10, 23],
        "enumer": 23,
        "ko": [4, 23],
        "sroberta": 23,
        "multitask": 23,
        "multilingu": 23,
        "e5": 23,
        "multipl": [1, 9, 19, 21, 25],
        "includ": [9, 20],
        "vector": [2, 19, 21, 25],
        "don": [4, 7, 21],
        "embedding_funct": [21, 25],
        "persist_directori": 25,
        "client_set": 25,
        "chromadb": 25,
        "collection_metadata": 25,
        "client": 25,
        "relevance_score_fn": 25,
        "text_kei": 25,
        "namespac": 25,
        "distance_strategi": 25,
        "distancestrategi": 25,
        "32": 25,
        "sphinx": 27,
        "quickstart": 27,
        "sat": 27,
        "oct": 27,
        "7": 27,
        "56": 27,
        "adapt": 27,
        "complet": 27,
        "your": [1, 2, 19, 21, 26, 27],
        "least": 27,
        "root": 27,
        "toctre": 27,
        "direct": 27,
        "modul": [27, 28],
        "packag": 28,
        "subpackag": 28,
        "content": 28,
        "get_messages_ko": [],
        "new": [1, 19, 20],
        "union": [1, 22],
        "collect": 1,
        "rais": [1, 24],
        "valueerror": 1,
        "otherwis": [1, 24],
        "provid": [],
        "pickl": [1, 19],
        "disk": 1,
        "doesn": 1,
        "It": [1, 4, 7, 9, 10, 12, 17, 20, 21, 22],
        "ap": [2, 6],
        "baseretrievalmetr": [2, 6],
        "cg": [2, 6],
        "dcg": [2, 6],
        "exactlymatch": [],
        "f1": [2, 5, 6],
        "hole": [2, 6],
        "idcg": [2, 6],
        "inddcg": [2, 6],
        "indidcg": [2, 6],
        "ndcg": [2, 6],
        "precis": [2, 5, 6, 19],
        "recal": [2, 5, 6],
        "topkaccuraci": [2, 6],
        "histori": [],
        "plu": 21,
        "too": 4,
        "so": [4, 9, 21, 25],
        "clear": [],
        "copi": [0, 20],
        "remot": [],
        "server": 9,
        "chat_complet": [],
        "pkl": [7, 19, 21],
        "purpos": [1, 4, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "style": [],
        "user": 19,
        "korean": [],
        "af": 7,
        "Then": [7, 19],
        "q": [],
        "hop": 21,
        "recommend": [2, 4, 9, 22],
        "third": 7,
        "final": 7,
        "capit": 7,
        "korea": 7,
        "excel": 9,
        "txt": [9, 21],
        "pdf": [9, 19],
        "csv": 9,
        "xlsx": 9,
        "lazili": 9,
        "nomadama": [4, 9],
        "asyncio": 9,
        "request": 9,
        "mmd": 9,
        "scienc": 9,
        "order": 9,
        "nougat": 9,
        "dockerfil": 9,
        "facebookresearch": [9, 16],
        "At": [9, 10, 19],
        "our": 10,
        "own": 10,
        "dimens": [10, 21],
        "recurs": 10,
        "specifi": [1, 10, 11, 19, 21, 22, 26],
        "overlap_s": 10,
        "overlap": 10,
        "hub": 14,
        "devsinghsachan": 18,
        "unsupervis": 18,
        "languag": [4, 10, 18],
        "likelihood": 18,
        "represent": [2, 19, 21],
        "put": [4, 19, 21, 22],
        "combin": [12, 17, 19],
        "rrf": 19,
        "convex": 19,
        "shot": [19, 21],
        "dens": 19,
        "arxiv": [19, 21],
        "2212": 19,
        "10496": 19,
        "hypothet": 19,
        "backend": 19,
        "most": [10, 19, 22],
        "lastli": 19,
        "uniqu": 20,
        "identifi": 20,
        "By": 20,
        "arbitrari": 20,
        "next": [9, 20],
        "last": 20,
        "previou": 20,
        "evid": 21,
        "after": [21, 22],
        "automat": 21,
        "sourc": [9, 20, 21],
        "few": 21,
        "els": 21,
        "factori": 23,
        "easili": 23,
        "singleton": [21, 24],
        "manag": 24,
        "redi": 24,
        "howev": 25,
        "langchian": 25,
        "huge": 25,
        "reduc": [22, 25],
        "check_retrieval_ev": [2, 6],
        "stretagyqa_k_ev": [2, 6],
        "qrels_relev": 6,
        "preds_relev": 6,
        "ko_strategy_qa": [0, 2],
        "qasper": [0, 2],
        "strategy_qa": [0, 2],
        "auto": [0, 28],
        "autoevalu": [0, 2],
        "baseevalu": [0, 2, 4],
        "uuid_to_str": [0, 2],
        "markdown_splitt": [],
        "bm25rerank": [0, 11],
        "evaluate_result": [0, 28],
        "evaluateresult": [0, 2, 4, 20],
        "each_result": [0, 20],
        "use_metr": [0, 20],
        "basedatasetevalu": [2, 4],
        "basestrategyqa": [2, 4],
        "convert_qa_to_pd": [2, 4],
        "kostrategyqaevalu": [2, 4],
        "dataset_nam": [2, 4],
        "qasperevalu": [2, 4],
        "strategyqaevalu": [2, 4],
        "ground": [2, 3, 4, 6],
        "truth": [2, 3, 4, 6],
        "properli": 2,
        "ingestpipelin": 2,
        "run_al": [2, 4],
        "id_list": 2,
        "ingest_s": 4,
        "run_pipelin": 4,
        "evaluate_s": 4,
        "context_recal": [2, 4],
        "context_precis": [2, 4],
        "In": [4, 9],
        "design": [4, 10],
        "relat": 4,
        "certain": 4,
        "suitabl": 4,
        "void": 4,
        "rate": 6,
        "predict": [3, 6, 21],
        "docs_to_passag": [],
        "markdownheadersplitt": [8, 10],
        "headers_to_split_on": 10,
        "return_each_lin": 10,
        "panda": 20,
        "core": 20,
        "frame": 20,
        "datafram": 20,
        "completionllm": [],
        "rerankrunpipelin": [0, 7],
        "visconderunpipelin": [0, 7],
        "default_prompt": [0, 7],
        "code_splitt": [0, 8],
        "html_header_splitt": [0, 8],
        "markdown_header_splitt": [0, 8],
        "token_splitt": [0, 8],
        "random_st": [4, 5],
        "Not": [],
        "befor": [20, 22],
        "codesplitt": [8, 10],
        "htmlheadersplitt": [8, 10],
        "tokensplitt": [8, 10],
        "language_nam": 10,
        "librari": 10,
        "inherit": 10,
        "from_languag": 10,
        "recursivecharactertextsplitt": 10,
        "cpp": 10,
        "java": 10,
        "kotlin": 10,
        "php": 10,
        "proto": 10,
        "rst": 10,
        "rubi": 10,
        "rust": 10,
        "scala": 10,
        "swift": 10,
        "latex": 10,
        "html": [9, 10],
        "sol": 10,
        "csharp": 10,
        "return_each_el": 10,
        "header": 10,
        "htmlheadertextsplitt": 10,
        "markdownheadertextsplitt": 10,
        "tiktoken": 10,
        "pretrained_model_nam": 10,
        "variou": [10, 21],
        "smaller": 10,
        "spaci": 10,
        "sentencetransform": 10,
        "nltk": 10,
        "baseanswermetr": [2, 3],
        "msmarcoevalu": [2, 4],
        "version": 4,
        "v1": 4,
        "mr_tydi": [0, 2],
        "answer_gt_metr": [0, 2],
        "answer_no_gt_metr": [],
        "answer_passage_metr": [0, 2],
        "retrieval_gt_metr": [0, 2],
        "retrieval_gt_metrics_rank_awar": [0, 2],
        "retrieval_no_gt_metr": [],
        "dummyretriev": [0, 2],
        "bleu": [2, 3],
        "basepassageanswermetr": [2, 3],
        "kf1": [2, 3, 4],
        "mrtydievalu": [2, 4],
        "validate_passag": [2, 4],
        "valid": [2, 4, 20, 21],
        "retrieval_gt": [2, 4],
        "answer_relev": 2,
        "faith": 2,
        "topk_accuraci": 2,
        "em": [],
        "f1_score": 2,
        "ind_dcg": 2,
        "ind_idcg": 2,
        "knowledg": [3, 21],
        "english": 4,
        "big": 4,
        "long": 4,
        "time": [0, 1, 4, 9, 11],
        "shuffl": 4,
        "corpu": 4,
        "slice": [0, 4, 20],
        "test": [4, 21],
        "gt": 4,
        "random": 4,
        "fix": 4,
        "arrai": 4,
        "bitgener": 4,
        "np": [4, 21],
        "randomst": 4,
        "baseingestpipelin": [0, 7],
        "baserunpipelin": [0, 2, 4, 7],
        "default_chat_prompt": [0, 7],
        "get_passages_and_run": [0, 7],
        "ragchainchatprompttempl": [0, 7, 20],
        "input_vari": [0, 7, 20, 21],
        "validate_templ": [0, 20],
        "ragchainprompttempl": [0, 7, 20],
        "templat": [0, 7, 20, 21],
        "template_format": [0, 20],
        "mr": 4,
        "tydi": 4,
        "alwai": 4,
        "systemmessageprompttempl": 7,
        "prompttempl": [7, 20, 21],
        "know": 7,
        "up": [7, 26],
        "sai": 7,
        "humanmessageprompttempl": 7,
        "aimessageprompttempl": 7,
        "rel": 7,
        "batch": [0, 7, 21, 26],
        "baselanguagemodel": [7, 19, 21],
        "retrieval_opt": [7, 19],
        "rel_scor": 7,
        "lcel": 7,
        "invok": [0, 1, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "runnabl": [1, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "input_typ": 20,
        "output_pars": 20,
        "baseoutputpars": 20,
        "partial_vari": 20,
        "basemessageprompttempl": 20,
        "basemessag": [20, 22],
        "basechatprompttempl": 20,
        "chatprompttempl": 20,
        "variabl": [20, 26],
        "messagelik": 20,
        "consist": 20,
        "either": 20,
        "try": [20, 21, 24],
        "f": 20,
        "jinja2": 20,
        "expect": 20,
        "beir": [],
        "natural_qa": [],
        "extra": [0, 2, 20],
        "search_detector_evalu": [0, 2],
        "answer_no_gt_ragas_metr": [0, 2],
        "retrieval_gt_ragas_metr": [0, 2],
        "retrieval_no_gt_ragas_metr": [0, 2],
        "deepdoctection_load": [0, 8],
        "rede_search_detector": [0, 28],
        "redesearchdetector": [0, 5, 21],
        "detect": [0, 21],
        "find_representation_transform": [0, 21],
        "find_threshold": [0, 21],
        "representation_form": [0, 21],
        "train_density_estim": [0, 21],
        "basebeirevalu": [],
        "make_corpus_passag": [],
        "make_gt_passages_and_duplicated_id": [],
        "remove_duplicate_passag": [],
        "beirfeverevalu": [],
        "beirfiqaevalu": [],
        "beirhotpotqaevalu": [],
        "beirquoraevalu": [],
        "beirscidocsevalu": [],
        "beirscifactevalu": [],
        "naturalqaevalu": [2, 4],
        "searchdetectorevalu": [2, 5],
        "extract_last_log_text": [2, 5],
        "robust": [2, 4],
        "fever": [],
        "row": [5, 9],
        "gt_id": [],
        "eval_s": [],
        "id_for_remove_duplicated_corpu": [],
        "remov": 22,
        "between": [],
        "faster": [],
        "mark": [],
        "fiqa": [],
        "hotpotqa": [],
        "quora": [],
        "scidoc": [],
        "scifact": [],
        "natur": 4,
        "search_detector": 5,
        "detector": [5, 21],
        "dstc11": 5,
        "track5": 5,
        "now": 5,
        "test_cnt": 5,
        "train_knowledge_seeking_cnt": 5,
        "train_non_knowledge_seeking_cnt": 5,
        "valid_percentag": 5,
        "deepdoctectionpdfload": [8, 9],
        "extract_pag": [8, 9],
        "find_posit": [8, 9],
        "deepdoctection_host": 9,
        "deepdoctect": 9,
        "substr": 9,
        "threshold": 21,
        "rede": 21,
        "seek": 21,
        "turn": 21,
        "infer": 21,
        "dialogu": 21,
        "great": [9, 21],
        "below": 21,
        "jin2021toward": 21,
        "toward": 21,
        "orient": 21,
        "jin": 21,
        "di": 21,
        "gao": 21,
        "shuyang": 21,
        "kim": 21,
        "seokhwan": 21,
        "liu": 21,
        "yang": 21,
        "hakkani": 21,
        "tur": 21,
        "dilek": 21,
        "preprint": 21,
        "2109": 21,
        "08820": 21,
        "sentenc": 21,
        "test_knowledge_seeking_sent": 21,
        "test_non_knowledge_seeking_sent": 21,
        "knowledge_seeking_sent": 21,
        "l": 21,
        "valid_knowledge_seeking_sent": 21,
        "valid_non_knowledge_seeking_sent": 21,
        "youden": 21,
        "gmm": 21,
        "gaussianmixtur": 21,
        "non_knowledge_seeking_sent": 21,
        "gaussian": 21,
        "mixtur": 21,
        "classifi": 21,
        "n_compon": 21,
        "antiqu": [0, 2],
        "nfcorpu": [0, 2],
        "search_qa": [0, 2],
        "triviaqa": [0, 2],
        "rust_hwp_load": [0, 8],
        "win32_hwp_load": [0, 8],
        "antiqueevalu": [2, 4],
        "nfcorpusevalu": [2, 4],
        "searchqaevalu": [2, 4],
        "triviaqaevalu": [2, 4],
        "notic": 4,
        "rusthwpload": [8, 9],
        "win32hwpload": [8, 9],
        "convert_hwp_to_hwpx": [8, 9],
        "preprocessor": [8, 9],
        "libhwp": 9,
        "work": [1, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "o": 9,
        "unfortun": 9,
        "distinguish": 9,
        "column": 9,
        "page_typ": 9,
        "mac": 9,
        "linux": 9,
        "extern": [9, 24],
        "program": 9,
        "avail": 9,
        "pywin32": 9,
        "hwpx": 9,
        "exclud": [9, 20],
        "complic": 9,
        "But": 9,
        "choos": [9, 20],
        "input_filepath": 9,
        "output_filepath": 9,
        "asqa": [0, 2],
        "dstc11_track5": [0, 2],
        "simple_tim": [0, 11],
        "weighted_tim": [0, 11],
        "compressor": [0, 21],
        "cluster_tim": [0, 21],
        "dynamo_link": [0, 21],
        "json_link": [0, 21],
        "redis_link": [0, 21],
        "semantic_clust": [0, 22, 28],
        "baselink": [21, 24],
        "put_json": [21, 24],
        "singletoncreationerror": [21, 24],
        "dynamolink": [21, 24],
        "create_or_load_t": [21, 24],
        "create_t": [21, 24],
        "handle_error": [21, 24],
        "load_tabl": [21, 24],
        "jsonlink": [21, 24],
        "create_json": [21, 24],
        "create_or_load_json": [21, 24],
        "load_json": [21, 24],
        "redislink": [21, 24],
        "allow_multiple_inst": 24,
        "json_data": [],
        "except": 24,
        "anoth": 24,
        "dynamodbsingleton": 24,
        "dynamodb": 24,
        "table_nam": 24,
        "err": 24,
        "allow": 24,
        "role": 24,
        "plai": 24,
        "dynamo": 24,
        "content_datetim": [0, 1, 12, 17, 20],
        "reset_id": [0, 20],
        "semanticclust": [0, 21, 22],
        "cluster": [0, 21, 22],
        "content_datetime_rang": [1, 19],
        "datetim": [1, 9, 19, 20],
        "start_tim": 1,
        "end_tim": 1,
        "possibl": 1,
        "OR": 1,
        "meteor": [2, 3],
        "roug": [2, 3],
        "asqaevalu": [2, 4],
        "dstc11track5evalu": [2, 4],
        "dstc": 4,
        "11": 4,
        "simpletimererank": [11, 17],
        "weightedtimererank": [11, 17],
        "simpl": [12, 17],
        "awar": [12, 17],
        "rag": [12, 17],
        "decay_r": 17,
        "01": 17,
        "normal": [12, 17],
        "calcul": [12, 17, 22],
        "formula": [12, 17],
        "hours_pass": 17,
        "relevance_scor": [12, 17],
        "larger": [12, 17],
        "past": 17,
        "low": 17,
        "forbid": 20,
        "edit": 20,
        "everytim": 20,
        "passg": 20,
        "chang": 20,
        "updat": 20,
        "field": 20,
        "preced": 20,
        "over": 20,
        "trust": 20,
        "deep": 20,
        "basecompressor": [21, 22],
        "compress": [21, 22],
        "clustertimecompressor": [21, 22],
        "clustering_algorithm": 21,
        "kmean": 21,
        "semant": [21, 22],
        "optim": 21,
        "case": 21,
        "split_by_sent": 22,
        "recent": 22,
        "eli5": [0, 2],
        "natural_quest": [0, 2],
        "google_search": [0, 21, 28],
        "googlesearchrunpipelin": [0, 7],
        "rem_load": [0, 8],
        "simple_import": [0, 11],
        "weighted_import": [0, 11],
        "from_docu": [0, 20],
        "from_search": [0, 20],
        "llm_lingua": [0, 21],
        "websearch": [0, 21],
        "bing_search": [0, 21],
        "brave_search": [],
        "eli5evalu": [2, 4],
        "langchain_commun": 7,
        "use_search_count": [],
        "remload": [8, 9],
        "time_rang": 9,
        "rem": 9,
        "storag": 9,
        "sqlite": 9,
        "simpleimportancererank": [11, 12],
        "weightedimportancererank": [11, 12],
        "importance_weight": 12,
        "requir": 20,
        "metadat": 20,
        "y": 20,
        "m": 20,
        "h": 20,
        "search_result": 20,
        "snippet": 20,
        "higher": 20,
        "minu": 20,
        "llmlinguacompressor": [21, 22],
        "inputtyp": [0, 1, 8, 10, 11, 19, 21, 22, 26],
        "basewebsearch": [21, 26],
        "get_search_data": [21, 26],
        "googlesearch": [21, 26],
        "nousresearch": 22,
        "llama": 22,
        "7b": 22,
        "hf": 22,
        "model_config": 22,
        "open_api_config": 22,
        "promptvalu": 22,
        "llmlingua": 22,
        "small": [4, 22],
        "perplex": 22,
        "runnableconfig": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "overrid": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26],
        "standard": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "tag": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "trace": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "max_concurr": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "control": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "much": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "refer": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "detail": [1, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22],
        "web": 26,
        "engin": 26,
        "num_result": 26,
        "search_param": 26,
        "googlesearchapiwrapp": 26,
        "wrap": 26,
        "delete_json": [21, 24],
        "nodatawarn": [21, 24],
        "noidwarn": [21, 24],
        "json_data_list": 24,
        "userwarn": 24,
        "em_answ": [2, 3],
        "em_retriev": [2, 6],
        "bingsearch": [21, 26],
        "bingsearchapiwrapp": 26,
        "environ": 26,
        "To": [4, 26],
        "bing_subscription_kei": 26,
        "bing": 26,
        "portal": 26,
        "home": 26,
        "bing_search_url": 26,
        "google_api_kei": 26,
        "googl": 26,
        "cloud": 26,
        "credenti": 26,
        "consol": 26,
        "google_cse_id": 26,
        "programm": 26,
        "programmablesearchengin": 26,
        "controlpanel": 26,
        "retrieval_result": [0, 22, 28],
        "lst": 24,
        "outputtyp": [0, 1, 8, 10, 11, 19, 21, 22, 26],
        "as_ingest": [0, 19],
        "runnableretrievalingest": [0, 19],
        "retrievalresult": [0, 11, 19, 20, 21, 22, 26],
        "to_prompt_input": [0, 20],
        "accept": [1, 10, 11, 19, 21, 22, 26],
        "produc": [1, 10, 11, 19, 21, 22, 26],
        "upsert": 1,
        "excess": 4,
        "prolong": 4,
        "enabl": 4,
        "per": 4,
        "basemodel": 20,
        "anyth": 20,
        "passage_convert_func": 20,
        "return_except": [21, 26],
        "thread": [21, 26],
        "pool": [21, 26],
        "executor": [21, 26],
        "well": [21, 26],
        "io": [21, 26],
        "bound": [21, 26],
        "thei": [21, 26],
        "effici": [21, 26],
        "g": [21, 26],
        "underli": [21, 26],
        "mode": [21, 26],
        "compressor_opt": 22,
        "n_cluster": 22,
        "web_search_opt": 26
    },
    "objects": {
        "": [[0, 0, 0, "-", "RAGchain"]],
        "RAGchain": [[1, 0, 0, "-", "DB"], [2, 0, 0, "-", "benchmark"], [7, 0, 0, "-", "pipeline"], [8, 0, 0, "-", "preprocess"], [11, 0, 0, "-", "reranker"], [19, 0, 0, "-", "retrieval"], [20, 0, 0, "-", "schema"], [21, 0, 0, "-", "utils"]],
        "RAGchain.DB": [[1, 0, 0, "-", "base"], [1, 0, 0, "-", "mongo_db"], [1, 0, 0, "-", "pickle_db"]],
        "RAGchain.DB.base": [[1, 1, 1, "", "BaseDB"]],
        "RAGchain.DB.base.BaseDB": [[1, 2, 1, "", "InputType"], [1, 2, 1, "", "OutputType"], [1, 3, 1, "", "create"], [1, 3, 1, "", "create_or_load"], [1, 2, 1, "", "db_type"], [1, 3, 1, "", "fetch"], [1, 3, 1, "", "get_db_origin"], [1, 3, 1, "", "invoke"], [1, 3, 1, "", "load"], [1, 3, 1, "", "save"], [1, 3, 1, "", "search"]],
        "RAGchain.DB.mongo_db": [[1, 1, 1, "", "MongoDB"]],
        "RAGchain.DB.mongo_db.MongoDB": [[1, 3, 1, "", "create"], [1, 3, 1, "", "create_or_load"], [1, 2, 1, "", "db_type"], [1, 3, 1, "", "fetch"], [1, 3, 1, "", "get_db_origin"], [1, 3, 1, "", "load"], [1, 3, 1, "", "save"], [1, 3, 1, "", "search"], [1, 3, 1, "", "set_db"]],
        "RAGchain.DB.pickle_db": [[1, 1, 1, "", "PickleDB"]],
        "RAGchain.DB.pickle_db.PickleDB": [[1, 3, 1, "", "create"], [1, 3, 1, "", "create_or_load"], [1, 2, 1, "", "db_type"], [1, 3, 1, "", "fetch"], [1, 3, 1, "", "get_db_origin"], [1, 3, 1, "", "load"], [1, 3, 1, "", "save"], [1, 3, 1, "", "search"]],
        "RAGchain.benchmark": [[3, 0, 0, "-", "answer"], [2, 0, 0, "-", "auto"], [2, 0, 0, "-", "base"], [4, 0, 0, "-", "dataset"], [5, 0, 0, "-", "extra"], [6, 0, 0, "-", "retrieval"]],
        "RAGchain.benchmark.answer": [[3, 0, 0, "-", "metrics"]],
        "RAGchain.benchmark.answer.metrics": [[3, 1, 1, "", "BLEU"], [3, 1, 1, "", "BaseAnswerMetric"], [3, 1, 1, "", "BasePassageAnswerMetric"], [3, 1, 1, "", "EM_answer"], [3, 1, 1, "", "KF1"], [3, 1, 1, "", "METEOR"], [3, 1, 1, "", "ROUGE"]],
        "RAGchain.benchmark.answer.metrics.BLEU": [[3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.answer.metrics.BaseAnswerMetric": [[3, 3, 1, "", "eval"], [3, 2, 1, "", "metric_name"], [3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.answer.metrics.BasePassageAnswerMetric": [[3, 3, 1, "", "eval"], [3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.answer.metrics.EM_answer": [[3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.answer.metrics.KF1": [[3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.answer.metrics.METEOR": [[3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.answer.metrics.ROUGE": [[3, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.auto": [[2, 1, 1, "", "AutoEvaluator"]],
        "RAGchain.benchmark.auto.AutoEvaluator": [[2, 3, 1, "", "evaluate"]],
        "RAGchain.benchmark.base": [[2, 1, 1, "", "BaseEvaluator"], [2, 1, 1, "", "DummyRetrieval"]],
        "RAGchain.benchmark.base.BaseEvaluator": [[2, 4, 1, "", "answer_gt_metrics"], [2, 4, 1, "", "answer_no_gt_ragas_metrics"], [2, 4, 1, "", "answer_passage_metrics"], [2, 3, 1, "", "evaluate"], [2, 4, 1, "", "retrieval_gt_metrics"], [2, 4, 1, "", "retrieval_gt_metrics_rank_aware"], [2, 4, 1, "", "retrieval_gt_ragas_metrics"], [2, 4, 1, "", "retrieval_no_gt_ragas_metrics"], [2, 3, 1, "", "uuid_to_str"]],
        "RAGchain.benchmark.base.DummyRetrieval": [[2, 3, 1, "", "delete"], [2, 3, 1, "", "ingest"], [2, 3, 1, "", "retrieve"], [2, 3, 1, "", "retrieve_id"], [2, 3, 1, "", "retrieve_id_with_scores"]],
        "RAGchain.benchmark.dataset": [[4, 0, 0, "-", "antique"], [4, 0, 0, "-", "asqa"], [4, 0, 0, "-", "base"], [4, 0, 0, "-", "dstc11_track5"], [4, 0, 0, "-", "eli5"], [4, 0, 0, "-", "ko_strategy_qa"], [4, 0, 0, "-", "mr_tydi"], [4, 0, 0, "-", "msmarco"], [4, 0, 0, "-", "natural_question"], [4, 0, 0, "-", "nfcorpus"], [4, 0, 0, "-", "qasper"], [4, 0, 0, "-", "search_qa"], [4, 0, 0, "-", "strategy_qa"], [4, 0, 0, "-", "triviaqa"]],
        "RAGchain.benchmark.dataset.antique": [[4, 1, 1, "", "AntiqueEvaluator"]],
        "RAGchain.benchmark.dataset.antique.AntiqueEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.asqa": [[4, 1, 1, "", "ASQAEvaluator"]],
        "RAGchain.benchmark.dataset.asqa.ASQAEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.base": [[4, 1, 1, "", "BaseDatasetEvaluator"], [4, 1, 1, "", "BaseStrategyQA"]],
        "RAGchain.benchmark.dataset.base.BaseDatasetEvaluator": [[4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.base.BaseStrategyQA": [[4, 3, 1, "", "convert_qa_to_pd"]],
        "RAGchain.benchmark.dataset.dstc11_track5": [[4, 1, 1, "", "DSTC11Track5Evaluator"]],
        "RAGchain.benchmark.dataset.dstc11_track5.DSTC11Track5Evaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.eli5": [[4, 1, 1, "", "Eli5Evaluator"]],
        "RAGchain.benchmark.dataset.eli5.Eli5Evaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.ko_strategy_qa": [[4, 1, 1, "", "KoStrategyQAEvaluator"]],
        "RAGchain.benchmark.dataset.ko_strategy_qa.KoStrategyQAEvaluator": [[4, 4, 1, "", "dataset_name"], [4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.mr_tydi": [[4, 1, 1, "", "MrTydiEvaluator"]],
        "RAGchain.benchmark.dataset.mr_tydi.MrTydiEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.msmarco": [[4, 1, 1, "", "MSMARCOEvaluator"]],
        "RAGchain.benchmark.dataset.msmarco.MSMARCOEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.natural_question": [[4, 1, 1, "", "NaturalQAEvaluator"]],
        "RAGchain.benchmark.dataset.natural_question.NaturalQAEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.nfcorpus": [[4, 1, 1, "", "NFCorpusEvaluator"]],
        "RAGchain.benchmark.dataset.nfcorpus.NFCorpusEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.qasper": [[4, 1, 1, "", "QasperEvaluator"]],
        "RAGchain.benchmark.dataset.qasper.QasperEvaluator": [[4, 4, 1, "", "dataset_name"], [4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"], [4, 3, 1, "", "preprocess"]],
        "RAGchain.benchmark.dataset.search_qa": [[4, 1, 1, "", "SearchQAEvaluator"]],
        "RAGchain.benchmark.dataset.search_qa.SearchQAEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.strategy_qa": [[4, 1, 1, "", "StrategyQAEvaluator"]],
        "RAGchain.benchmark.dataset.strategy_qa.StrategyQAEvaluator": [[4, 4, 1, "", "dataset_name"], [4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.dataset.triviaqa": [[4, 1, 1, "", "TriviaQAEvaluator"]],
        "RAGchain.benchmark.dataset.triviaqa.TriviaQAEvaluator": [[4, 3, 1, "", "evaluate"], [4, 3, 1, "", "ingest"]],
        "RAGchain.benchmark.extra": [[5, 0, 0, "-", "search_detector_evaluator"]],
        "RAGchain.benchmark.extra.search_detector_evaluator": [[5, 1, 1, "", "SearchDetectorEvaluator"]],
        "RAGchain.benchmark.extra.search_detector_evaluator.SearchDetectorEvaluator": [[5, 3, 1, "", "evaluate"], [5, 3, 1, "", "extract_last_log_text"], [5, 3, 1, "", "train"]],
        "RAGchain.benchmark.retrieval": [[6, 0, 0, "-", "evaluator"], [6, 0, 0, "-", "metrics"]],
        "RAGchain.benchmark.retrieval.evaluator": [[6, 5, 1, "", "basic_retrieval_evaluation"], [6, 5, 1, "", "check_retrieval_eval"], [6, 5, 1, "", "stretagyqa_k_eval"], [6, 5, 1, "", "stretagyqa_retrieval_evaluation"]],
        "RAGchain.benchmark.retrieval.metrics": [[6, 1, 1, "", "AP"], [6, 1, 1, "", "BaseRetrievalMetric"], [6, 1, 1, "", "CG"], [6, 1, 1, "", "DCG"], [6, 1, 1, "", "EM_retrieval"], [6, 1, 1, "", "F1"], [6, 1, 1, "", "Hole"], [6, 1, 1, "", "IDCG"], [6, 1, 1, "", "IndDCG"], [6, 1, 1, "", "IndIDCG"], [6, 1, 1, "", "NDCG"], [6, 1, 1, "", "Precision"], [6, 1, 1, "", "RR"], [6, 1, 1, "", "Recall"], [6, 1, 1, "", "TopKAccuracy"]],
        "RAGchain.benchmark.retrieval.metrics.AP": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.BaseRetrievalMetric": [[6, 3, 1, "", "eval"], [6, 2, 1, "", "metric_name"], [6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.CG": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.DCG": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.EM_retrieval": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.F1": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.Hole": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.IDCG": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.IndDCG": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.IndIDCG": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.NDCG": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.Precision": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.RR": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.Recall": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.benchmark.retrieval.metrics.TopKAccuracy": [[6, 3, 1, "", "retrieval_metric_function"]],
        "RAGchain.pipeline": [[7, 0, 0, "-", "base"], [7, 0, 0, "-", "basic"], [7, 0, 0, "-", "google_search"], [7, 0, 0, "-", "rerank"], [7, 0, 0, "-", "visconde"]],
        "RAGchain.pipeline.base": [[7, 1, 1, "", "BaseIngestPipeline"], [7, 1, 1, "", "BaseRunPipeline"]],
        "RAGchain.pipeline.base.BaseRunPipeline": [[7, 4, 1, "", "default_chat_prompt"], [7, 4, 1, "", "default_prompt"], [7, 3, 1, "", "get_passages_and_run"]],
        "RAGchain.pipeline.basic": [[7, 1, 1, "", "BasicIngestPipeline"], [7, 1, 1, "", "BasicRunPipeline"]],
        "RAGchain.pipeline.basic.BasicRunPipeline": [[7, 3, 1, "", "get_passages_and_run"], [7, 4, 1, "", "run"]],
        "RAGchain.pipeline.google_search": [[7, 1, 1, "", "GoogleSearchRunPipeline"]],
        "RAGchain.pipeline.google_search.GoogleSearchRunPipeline": [[7, 3, 1, "", "get_passages_and_run"], [7, 4, 1, "", "run"]],
        "RAGchain.pipeline.rerank": [[7, 1, 1, "", "RerankRunPipeline"]],
        "RAGchain.pipeline.rerank.RerankRunPipeline": [[7, 3, 1, "", "get_passages_and_run"], [7, 4, 1, "", "run"]],
        "RAGchain.pipeline.visconde": [[7, 1, 1, "", "ViscondeRunPipeline"]],
        "RAGchain.pipeline.visconde.ViscondeRunPipeline": [[7, 3, 1, "", "get_passages_and_run"], [7, 4, 1, "", "run"], [7, 4, 1, "", "strategyqa_prompt"]],
        "RAGchain.preprocess": [[9, 0, 0, "-", "loader"], [10, 0, 0, "-", "text_splitter"]],
        "RAGchain.preprocess.loader": [[9, 0, 0, "-", "dataset_loader"], [9, 0, 0, "-", "deepdoctection_loader"], [9, 0, 0, "-", "excel_loader"], [9, 0, 0, "-", "file_loader"], [9, 0, 0, "-", "hwp_loader"], [9, 0, 0, "-", "mathpix_markdown_loader"], [9, 0, 0, "-", "nougat_pdf_loader"], [9, 0, 0, "-", "pdf_link_loader"], [9, 0, 0, "-", "rem_loader"], [9, 0, 0, "-", "rust_hwp_loader"], [9, 0, 0, "-", "win32_hwp_loader"]],
        "RAGchain.preprocess.loader.dataset_loader": [[9, 1, 1, "", "KoStrategyQALoader"]],
        "RAGchain.preprocess.loader.dataset_loader.KoStrategyQALoader": [[9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.deepdoctection_loader": [[9, 1, 1, "", "DeepdoctectionPDFLoader"]],
        "RAGchain.preprocess.loader.deepdoctection_loader.DeepdoctectionPDFLoader": [[9, 3, 1, "", "extract_pages"], [9, 3, 1, "", "find_positions"], [9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.excel_loader": [[9, 1, 1, "", "ExcelLoader"]],
        "RAGchain.preprocess.loader.excel_loader.ExcelLoader": [[9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.file_loader": [[9, 1, 1, "", "FileLoader"]],
        "RAGchain.preprocess.loader.file_loader.FileLoader": [[9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.hwp_loader": [[9, 1, 1, "", "HwpLoader"]],
        "RAGchain.preprocess.loader.hwp_loader.HwpLoader": [[9, 3, 1, "", "async_request"], [9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.mathpix_markdown_loader": [[9, 1, 1, "", "MathpixMarkdownLoader"]],
        "RAGchain.preprocess.loader.mathpix_markdown_loader.MathpixMarkdownLoader": [[9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"], [9, 3, 1, "", "split_section"], [9, 3, 1, "", "split_table"]],
        "RAGchain.preprocess.loader.nougat_pdf_loader": [[9, 1, 1, "", "NougatPDFLoader"]],
        "RAGchain.preprocess.loader.nougat_pdf_loader.NougatPDFLoader": [[9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.pdf_link_loader": [[9, 1, 1, "", "PdfLinkLoader"]],
        "RAGchain.preprocess.loader.pdf_link_loader.PdfLinkLoader": [[9, 3, 1, "", "load"], [9, 3, 1, "", "valid_url"]],
        "RAGchain.preprocess.loader.rem_loader": [[9, 1, 1, "", "RemLoader"]],
        "RAGchain.preprocess.loader.rem_loader.RemLoader": [[9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.rust_hwp_loader": [[9, 1, 1, "", "RustHwpLoader"]],
        "RAGchain.preprocess.loader.rust_hwp_loader.RustHwpLoader": [[9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"]],
        "RAGchain.preprocess.loader.win32_hwp_loader": [[9, 1, 1, "", "Win32HwpLoader"]],
        "RAGchain.preprocess.loader.win32_hwp_loader.Win32HwpLoader": [[9, 3, 1, "", "convert_hwp_to_hwpx"], [9, 3, 1, "", "lazy_load"], [9, 3, 1, "", "load"], [9, 3, 1, "", "preprocessor"]],
        "RAGchain.preprocess.text_splitter": [[10, 0, 0, "-", "base"], [10, 0, 0, "-", "code_splitter"], [10, 0, 0, "-", "html_header_splitter"], [10, 0, 0, "-", "markdown_header_splitter"], [10, 0, 0, "-", "text_splitter"], [10, 0, 0, "-", "token_splitter"]],
        "RAGchain.preprocess.text_splitter.base": [[10, 1, 1, "", "BaseTextSplitter"]],
        "RAGchain.preprocess.text_splitter.base.BaseTextSplitter": [[10, 2, 1, "", "InputType"], [10, 2, 1, "", "OutputType"], [10, 3, 1, "", "invoke"], [10, 3, 1, "", "split_document"], [10, 3, 1, "", "split_documents"]],
        "RAGchain.preprocess.text_splitter.code_splitter": [[10, 1, 1, "", "CodeSplitter"]],
        "RAGchain.preprocess.text_splitter.code_splitter.CodeSplitter": [[10, 3, 1, "", "split_document"]],
        "RAGchain.preprocess.text_splitter.html_header_splitter": [[10, 1, 1, "", "HTMLHeaderSplitter"]],
        "RAGchain.preprocess.text_splitter.html_header_splitter.HTMLHeaderSplitter": [[10, 3, 1, "", "split_document"]],
        "RAGchain.preprocess.text_splitter.markdown_header_splitter": [[10, 1, 1, "", "MarkDownHeaderSplitter"]],
        "RAGchain.preprocess.text_splitter.markdown_header_splitter.MarkDownHeaderSplitter": [[10, 3, 1, "", "split_document"]],
        "RAGchain.preprocess.text_splitter.text_splitter": [[10, 1, 1, "", "RecursiveTextSplitter"]],
        "RAGchain.preprocess.text_splitter.text_splitter.RecursiveTextSplitter": [[10, 3, 1, "", "split_document"]],
        "RAGchain.preprocess.text_splitter.token_splitter": [[10, 1, 1, "", "TokenSplitter"]],
        "RAGchain.preprocess.text_splitter.token_splitter.TokenSplitter": [[10, 3, 1, "", "split_document"]],
        "RAGchain.reranker": [[11, 0, 0, "-", "base"], [11, 0, 0, "-", "bm25"], [12, 0, 0, "-", "importance"], [13, 0, 0, "-", "llm"], [14, 0, 0, "-", "pygaggle"], [16, 0, 0, "-", "tart"], [17, 0, 0, "-", "time"], [18, 0, 0, "-", "upr"]],
        "RAGchain.reranker.base": [[11, 1, 1, "", "BaseReranker"]],
        "RAGchain.reranker.base.BaseReranker": [[11, 2, 1, "", "InputType"], [11, 2, 1, "", "OutputType"], [11, 3, 1, "", "rerank"]],
        "RAGchain.reranker.bm25": [[11, 1, 1, "", "BM25Reranker"]],
        "RAGchain.reranker.bm25.BM25Reranker": [[11, 3, 1, "", "invoke"], [11, 3, 1, "", "rerank"]],
        "RAGchain.reranker.importance": [[12, 0, 0, "-", "simple_importance"], [12, 0, 0, "-", "weighted_importance"]],
        "RAGchain.reranker.importance.simple_importance": [[12, 1, 1, "", "SimpleImportanceReranker"]],
        "RAGchain.reranker.importance.simple_importance.SimpleImportanceReranker": [[12, 3, 1, "", "invoke"], [12, 3, 1, "", "rerank"]],
        "RAGchain.reranker.importance.weighted_importance": [[12, 1, 1, "", "WeightedImportanceReranker"]],
        "RAGchain.reranker.importance.weighted_importance.WeightedImportanceReranker": [[12, 3, 1, "", "invoke"], [12, 3, 1, "", "rerank"]],
        "RAGchain.reranker.llm": [[13, 0, 0, "-", "llm"], [13, 0, 0, "-", "rank_gpt"]],
        "RAGchain.reranker.llm.llm": [[13, 1, 1, "", "LLMReranker"]],
        "RAGchain.reranker.llm.llm.LLMReranker": [[13, 3, 1, "", "find_passages"], [13, 3, 1, "", "invoke"], [13, 3, 1, "", "make_item"], [13, 3, 1, "", "make_passages"], [13, 3, 1, "", "rerank"], [13, 3, 1, "", "rerank_sliding_window"]],
        "RAGchain.reranker.llm.rank_gpt": [[13, 1, 1, "", "SafeOpenai"], [13, 5, 1, "", "clean_response"], [13, 5, 1, "", "create_permutation_instruction"], [13, 5, 1, "", "get_post_prompt"], [13, 5, 1, "", "get_prefix_prompt"], [13, 5, 1, "", "max_tokens"], [13, 5, 1, "", "num_tokens_from_messages"], [13, 5, 1, "", "permutation_pipeline"], [13, 5, 1, "", "receive_permutation"], [13, 5, 1, "", "remove_duplicate"], [13, 5, 1, "", "run_llm"], [13, 5, 1, "", "sliding_windows"]],
        "RAGchain.reranker.llm.rank_gpt.SafeOpenai": [[13, 3, 1, "", "chat"], [13, 3, 1, "", "text"]],
        "RAGchain.reranker.pygaggle": [[14, 0, 0, "-", "base"], [15, 0, 0, "-", "model"], [14, 0, 0, "-", "monoT5"], [14, 0, 0, "-", "transformer"]],
        "RAGchain.reranker.pygaggle.base": [[14, 1, 1, "", "Query"], [14, 1, 1, "", "Reranker"], [14, 1, 1, "", "Text"]],
        "RAGchain.reranker.pygaggle.base.Reranker": [[14, 3, 1, "", "rerank"], [14, 3, 1, "", "rescore"]],
        "RAGchain.reranker.pygaggle.model": [[15, 0, 0, "-", "decode"], [15, 0, 0, "-", "tokenize"]],
        "RAGchain.reranker.pygaggle.model.decode": [[15, 5, 1, "", "greedy_decode"]],
        "RAGchain.reranker.pygaggle.model.tokenize": [[15, 1, 1, "", "DuoQueryDocumentBatch"], [15, 1, 1, "", "QueryDocumentBatch"], [15, 1, 1, "", "QueryDocumentBatchTokenizer"], [15, 1, 1, "", "T5BatchTokenizer"], [15, 1, 1, "", "TokenizerEncodeMixin"]],
        "RAGchain.reranker.pygaggle.model.tokenize.DuoQueryDocumentBatch": [[15, 4, 1, "", "doc_pairs"], [15, 4, 1, "", "output"], [15, 4, 1, "", "query"]],
        "RAGchain.reranker.pygaggle.model.tokenize.QueryDocumentBatch": [[15, 4, 1, "", "documents"], [15, 4, 1, "", "output"], [15, 4, 1, "", "query"]],
        "RAGchain.reranker.pygaggle.model.tokenize.QueryDocumentBatchTokenizer": [[15, 3, 1, "", "traverse_duo_query_document"], [15, 3, 1, "", "traverse_query_document"]],
        "RAGchain.reranker.pygaggle.model.tokenize.TokenizerEncodeMixin": [[15, 3, 1, "", "encode"], [15, 4, 1, "", "tokenizer"], [15, 4, 1, "", "tokenizer_kwargs"]],
        "RAGchain.reranker.pygaggle.monoT5": [[14, 1, 1, "", "MonoT5Reranker"]],
        "RAGchain.reranker.pygaggle.monoT5.MonoT5Reranker": [[14, 3, 1, "", "invoke"], [14, 3, 1, "", "rerank"]],
        "RAGchain.reranker.pygaggle.transformer": [[14, 1, 1, "", "MonoT5"]],
        "RAGchain.reranker.pygaggle.transformer.MonoT5": [[14, 3, 1, "", "get_model"], [14, 3, 1, "", "get_prediction_tokens"], [14, 3, 1, "", "get_tokenizer"], [14, 3, 1, "", "rescore"]],
        "RAGchain.reranker.tart": [[16, 0, 0, "-", "modeling_enc_t5"], [16, 0, 0, "-", "tart"], [16, 0, 0, "-", "tokenization_enc_t5"]],
        "RAGchain.reranker.tart.modeling_enc_t5": [[16, 1, 1, "", "EncT5ForSequenceClassification"]],
        "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification": [[16, 3, 1, "", "deparallelize"], [16, 3, 1, "", "forward"], [16, 3, 1, "", "get_encoder"], [16, 3, 1, "", "get_input_embeddings"], [16, 3, 1, "", "parallelize"], [16, 3, 1, "", "set_input_embeddings"], [16, 4, 1, "", "training"]],
        "RAGchain.reranker.tart.tart": [[16, 1, 1, "", "TARTReranker"]],
        "RAGchain.reranker.tart.tart.TARTReranker": [[16, 3, 1, "", "invoke"], [16, 3, 1, "", "rerank"]],
        "RAGchain.reranker.tart.tokenization_enc_t5": [[16, 1, 1, "", "EncT5Tokenizer"]],
        "RAGchain.reranker.tart.tokenization_enc_t5.EncT5Tokenizer": [[16, 3, 1, "", "build_inputs_with_special_tokens"], [16, 3, 1, "", "create_token_type_ids_from_sequences"], [16, 3, 1, "", "get_special_tokens_mask"]],
        "RAGchain.reranker.time": [[17, 0, 0, "-", "simple_time"], [17, 0, 0, "-", "weighted_time"]],
        "RAGchain.reranker.time.simple_time": [[17, 1, 1, "", "SimpleTimeReranker"]],
        "RAGchain.reranker.time.simple_time.SimpleTimeReranker": [[17, 3, 1, "", "invoke"], [17, 3, 1, "", "rerank"]],
        "RAGchain.reranker.time.weighted_time": [[17, 1, 1, "", "WeightedTimeReranker"]],
        "RAGchain.reranker.time.weighted_time.WeightedTimeReranker": [[17, 3, 1, "", "invoke"], [17, 3, 1, "", "rerank"]],
        "RAGchain.reranker.upr": [[18, 0, 0, "-", "upr"]],
        "RAGchain.reranker.upr.upr": [[18, 1, 1, "", "UPRReranker"]],
        "RAGchain.reranker.upr.upr.UPRReranker": [[18, 3, 1, "", "calculate_likelihood"], [18, 3, 1, "", "invoke"], [18, 3, 1, "", "rerank"]],
        "RAGchain.retrieval": [[19, 0, 0, "-", "base"], [19, 0, 0, "-", "bm25_retrieval"], [19, 0, 0, "-", "hybrid"], [19, 0, 0, "-", "hyde"], [19, 0, 0, "-", "vectordb_retrieval"]],
        "RAGchain.retrieval.base": [[19, 1, 1, "", "BaseRetrieval"], [19, 1, 1, "", "RunnableRetrievalIngest"]],
        "RAGchain.retrieval.base.BaseRetrieval": [[19, 2, 1, "", "InputType"], [19, 2, 1, "", "OutputType"], [19, 3, 1, "", "as_ingest"], [19, 3, 1, "", "create_db"], [19, 3, 1, "", "delete"], [19, 3, 1, "", "duplicate_check"], [19, 3, 1, "", "fetch_data"], [19, 3, 1, "", "fetch_data_from_db_origin"], [19, 3, 1, "", "fetch_each_db"], [19, 3, 1, "", "ingest"], [19, 3, 1, "", "invoke"], [19, 3, 1, "", "is_created"], [19, 3, 1, "", "retrieve"], [19, 3, 1, "", "retrieve_id"], [19, 3, 1, "", "retrieve_id_with_scores"], [19, 3, 1, "", "retrieve_with_filter"], [19, 3, 1, "", "search_data"], [19, 3, 1, "", "search_data_from_db_origin"], [19, 3, 1, "", "search_each_db"]],
        "RAGchain.retrieval.base.RunnableRetrievalIngest": [[19, 2, 1, "", "InputType"], [19, 2, 1, "", "OutputType"], [19, 3, 1, "", "invoke"]],
        "RAGchain.retrieval.bm25_retrieval": [[19, 1, 1, "", "BM25Retrieval"]],
        "RAGchain.retrieval.bm25_retrieval.BM25Retrieval": [[19, 3, 1, "", "delete"], [19, 3, 1, "", "ingest"], [19, 3, 1, "", "load_data"], [19, 3, 1, "", "persist"], [19, 3, 1, "", "retrieve"], [19, 3, 1, "", "retrieve_id"], [19, 3, 1, "", "retrieve_id_with_scores"]],
        "RAGchain.retrieval.hybrid": [[19, 1, 1, "", "HybridRetrieval"]],
        "RAGchain.retrieval.hybrid.HybridRetrieval": [[19, 3, 1, "", "delete"], [19, 3, 1, "", "ingest"], [19, 3, 1, "", "min_max_normalization"], [19, 3, 1, "", "retrieve"], [19, 3, 1, "", "retrieve_id"], [19, 3, 1, "", "retrieve_id_with_scores"], [19, 3, 1, "", "retrieve_id_with_scores_parallel"]],
        "RAGchain.retrieval.hyde": [[19, 1, 1, "", "HyDERetrieval"]],
        "RAGchain.retrieval.hyde.HyDERetrieval": [[19, 4, 1, "", "BASIC_SYSTEM_PROMPT"], [19, 3, 1, "", "delete"], [19, 3, 1, "", "ingest"], [19, 3, 1, "", "retrieve"], [19, 3, 1, "", "retrieve_id"], [19, 3, 1, "", "retrieve_id_with_scores"]],
        "RAGchain.retrieval.vectordb_retrieval": [[19, 1, 1, "", "VectorDBRetrieval"]],
        "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval": [[19, 3, 1, "", "delete"], [19, 3, 1, "", "ingest"], [19, 3, 1, "", "retrieve"], [19, 3, 1, "", "retrieve_id"], [19, 3, 1, "", "retrieve_id_with_scores"]],
        "RAGchain.schema": [[20, 0, 0, "-", "db_origin"], [20, 0, 0, "-", "evaluate_result"], [20, 0, 0, "-", "passage"], [20, 0, 0, "-", "prompt"], [20, 0, 0, "-", "retrieval_result"]],
        "RAGchain.schema.db_origin": [[20, 1, 1, "", "DBOrigin"]],
        "RAGchain.schema.db_origin.DBOrigin": [[20, 4, 1, "", "db_path"], [20, 4, 1, "", "db_type"], [20, 3, 1, "", "to_dict"]],
        "RAGchain.schema.evaluate_result": [[20, 1, 1, "", "EvaluateResult"]],
        "RAGchain.schema.evaluate_result.EvaluateResult": [[20, 4, 1, "", "each_results"], [20, 4, 1, "", "results"], [20, 4, 1, "", "use_metrics"]],
        "RAGchain.schema.passage": [[20, 1, 1, "", "Passage"]],
        "RAGchain.schema.passage.Passage": [[20, 1, 1, "", "Config"], [20, 4, 1, "", "content"], [20, 4, 1, "", "content_datetime"], [20, 3, 1, "", "copy"], [20, 4, 1, "", "filepath"], [20, 3, 1, "", "from_documents"], [20, 3, 1, "", "from_search"], [20, 4, 1, "", "id"], [20, 4, 1, "", "importance"], [20, 3, 1, "", "is_exactly_same"], [20, 3, 1, "", "make_prompts"], [20, 4, 1, "", "metadata_etc"], [20, 4, 1, "", "next_passage_id"], [20, 4, 1, "", "previous_passage_id"], [20, 3, 1, "", "reset_id"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_document"]],
        "RAGchain.schema.passage.Passage.Config": [[20, 4, 1, "", "extra"]],
        "RAGchain.schema.prompt": [[20, 1, 1, "", "RAGchainChatPromptTemplate"], [20, 1, 1, "", "RAGchainPromptTemplate"]],
        "RAGchain.schema.prompt.RAGchainChatPromptTemplate": [[20, 4, 1, "", "input_variables"], [20, 4, 1, "", "messages"], [20, 4, 1, "", "validate_template"]],
        "RAGchain.schema.prompt.RAGchainPromptTemplate": [[20, 4, 1, "", "input_variables"], [20, 4, 1, "", "template"], [20, 4, 1, "", "template_format"], [20, 4, 1, "", "validate_template"]],
        "RAGchain.schema.retrieval_result": [[20, 1, 1, "", "RetrievalResult"]],
        "RAGchain.schema.retrieval_result.RetrievalResult": [[20, 4, 1, "", "metadata"], [20, 4, 1, "", "passages"], [20, 4, 1, "", "query"], [20, 4, 1, "", "scores"], [20, 3, 1, "", "slice"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_prompt_input"]],
        "RAGchain.utils": [[22, 0, 0, "-", "compressor"], [23, 0, 0, "-", "embed"], [21, 0, 0, "-", "evidence_extractor"], [21, 0, 0, "-", "file_cache"], [24, 0, 0, "-", "linker"], [21, 0, 0, "-", "query_decompose"], [21, 0, 0, "-", "rede_search_detector"], [21, 0, 0, "-", "semantic_clustering"], [21, 0, 0, "-", "util"], [25, 0, 0, "-", "vectorstore"], [26, 0, 0, "-", "websearch"]],
        "RAGchain.utils.compressor": [[22, 0, 0, "-", "base"], [22, 0, 0, "-", "cluster_time"], [22, 0, 0, "-", "llm_lingua"]],
        "RAGchain.utils.compressor.base": [[22, 1, 1, "", "BaseCompressor"]],
        "RAGchain.utils.compressor.base.BaseCompressor": [[22, 2, 1, "", "InputType"], [22, 2, 1, "", "OutputType"], [22, 3, 1, "", "compress"], [22, 3, 1, "", "invoke"]],
        "RAGchain.utils.compressor.cluster_time": [[22, 1, 1, "", "ClusterTimeCompressor"]],
        "RAGchain.utils.compressor.cluster_time.ClusterTimeCompressor": [[22, 3, 1, "", "compress"]],
        "RAGchain.utils.compressor.llm_lingua": [[22, 1, 1, "", "LLMLinguaCompressor"]],
        "RAGchain.utils.compressor.llm_lingua.LLMLinguaCompressor": [[22, 2, 1, "", "InputType"], [22, 2, 1, "", "OutputType"], [22, 3, 1, "", "invoke"]],
        "RAGchain.utils.embed": [[23, 0, 0, "-", "embeddingfactory"]],
        "RAGchain.utils.embed.embeddingfactory": [[23, 1, 1, "", "EmbeddingFactory"], [23, 1, 1, "", "EmbeddingType"]],
        "RAGchain.utils.embed.embeddingfactory.EmbeddingFactory": [[23, 3, 1, "", "get"]],
        "RAGchain.utils.embed.embeddingfactory.EmbeddingType": [[23, 4, 1, "", "CONTRIEVER"], [23, 4, 1, "", "KOSIMCSE"], [23, 4, 1, "", "KO_SROBERTA_MULTITASK"], [23, 4, 1, "", "MULTILINGUAL_E5"], [23, 4, 1, "", "OPENAI"]],
        "RAGchain.utils.evidence_extractor": [[21, 1, 1, "", "EvidenceExtractor"]],
        "RAGchain.utils.evidence_extractor.EvidenceExtractor": [[21, 2, 1, "", "InputType"], [21, 2, 1, "", "OutputType"], [21, 3, 1, "", "batch"], [21, 3, 1, "", "extract"], [21, 3, 1, "", "invoke"]],
        "RAGchain.utils.file_cache": [[21, 1, 1, "", "FileCache"]],
        "RAGchain.utils.file_cache.FileCache": [[21, 2, 1, "", "InputType"], [21, 2, 1, "", "OutputType"], [21, 3, 1, "", "delete_duplicate"], [21, 3, 1, "", "invoke"]],
        "RAGchain.utils.linker": [[24, 0, 0, "-", "base"], [24, 0, 0, "-", "dynamo_linker"], [24, 0, 0, "-", "json_linker"], [24, 0, 0, "-", "redis_linker"]],
        "RAGchain.utils.linker.base": [[24, 1, 1, "", "BaseLinker"], [24, 6, 1, "", "NoDataWarning"], [24, 6, 1, "", "NoIdWarning"], [24, 1, 1, "", "Singleton"], [24, 6, 1, "", "SingletonCreationError"]],
        "RAGchain.utils.linker.base.BaseLinker": [[24, 3, 1, "", "delete_json"], [24, 3, 1, "", "flush_db"], [24, 3, 1, "", "get_json"], [24, 3, 1, "", "put_json"]],
        "RAGchain.utils.linker.dynamo_linker": [[24, 1, 1, "", "DynamoLinker"]],
        "RAGchain.utils.linker.dynamo_linker.DynamoLinker": [[24, 3, 1, "", "chunk"], [24, 3, 1, "", "create_or_load_table"], [24, 3, 1, "", "create_table"], [24, 3, 1, "", "delete_json"], [24, 3, 1, "", "flush_db"], [24, 3, 1, "", "get_json"], [24, 3, 1, "", "handle_error"], [24, 3, 1, "", "load_table"], [24, 3, 1, "", "put_json"]],
        "RAGchain.utils.linker.json_linker": [[24, 1, 1, "", "JsonLinker"]],
        "RAGchain.utils.linker.json_linker.JsonLinker": [[24, 3, 1, "", "create_json"], [24, 3, 1, "", "create_or_load_json"], [24, 3, 1, "", "delete_json"], [24, 3, 1, "", "flush_db"], [24, 3, 1, "", "get_json"], [24, 3, 1, "", "load_json"], [24, 3, 1, "", "put_json"]],
        "RAGchain.utils.linker.redis_linker": [[24, 1, 1, "", "RedisLinker"]],
        "RAGchain.utils.linker.redis_linker.RedisLinker": [[24, 3, 1, "", "connection_check"], [24, 3, 1, "", "delete_json"], [24, 3, 1, "", "flush_db"], [24, 3, 1, "", "get_json"], [24, 3, 1, "", "put_json"]],
        "RAGchain.utils.query_decompose": [[21, 1, 1, "", "QueryDecomposition"]],
        "RAGchain.utils.query_decompose.QueryDecomposition": [[21, 3, 1, "", "decompose"], [21, 4, 1, "", "decompose_prompt"], [21, 3, 1, "", "invoke"]],
        "RAGchain.utils.rede_search_detector": [[21, 1, 1, "", "RedeSearchDetector"]],
        "RAGchain.utils.rede_search_detector.RedeSearchDetector": [[21, 3, 1, "", "detect"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "find_representation_transform"], [21, 3, 1, "", "find_threshold"], [21, 3, 1, "", "representation_formation"], [21, 3, 1, "", "train_density_estimation"]],
        "RAGchain.utils.semantic_clustering": [[21, 1, 1, "", "SemanticClustering"]],
        "RAGchain.utils.semantic_clustering.SemanticClustering": [[21, 3, 1, "", "cluster"]],
        "RAGchain.utils.util": [[21, 1, 1, "", "FileChecker"], [21, 5, 1, "", "set_api_base"], [21, 5, 1, "", "slice_stop_words"], [21, 5, 1, "", "text_modifier"]],
        "RAGchain.utils.util.FileChecker": [[21, 3, 1, "", "check_type"], [21, 3, 1, "", "is_exist"]],
        "RAGchain.utils.vectorstore": [[25, 0, 0, "-", "base"], [25, 0, 0, "-", "chroma"], [25, 0, 0, "-", "pinecone"]],
        "RAGchain.utils.vectorstore.base": [[25, 1, 1, "", "SlimVectorStore"]],
        "RAGchain.utils.vectorstore.base.SlimVectorStore": [[25, 3, 1, "", "add_passage"], [25, 3, 1, "", "add_passages"]],
        "RAGchain.utils.vectorstore.chroma": [[25, 1, 1, "", "ChromaSlim"]],
        "RAGchain.utils.vectorstore.chroma.ChromaSlim": [[25, 3, 1, "", "add_passages"]],
        "RAGchain.utils.vectorstore.pinecone": [[25, 1, 1, "", "PineconeSlim"]],
        "RAGchain.utils.vectorstore.pinecone.PineconeSlim": [[25, 3, 1, "", "add_passages"]],
        "RAGchain.utils.websearch": [[26, 0, 0, "-", "base"], [26, 0, 0, "-", "bing_search"], [26, 0, 0, "-", "google_search"]],
        "RAGchain.utils.websearch.base": [[26, 1, 1, "", "BaseWebSearch"]],
        "RAGchain.utils.websearch.base.BaseWebSearch": [[26, 2, 1, "", "InputType"], [26, 2, 1, "", "OutputType"], [26, 3, 1, "", "get_search_data"], [26, 3, 1, "", "invoke"]],
        "RAGchain.utils.websearch.bing_search": [[26, 1, 1, "", "BingSearch"]],
        "RAGchain.utils.websearch.bing_search.BingSearch": [[26, 3, 1, "", "get_search_data"]],
        "RAGchain.utils.websearch.google_search": [[26, 1, 1, "", "GoogleSearch"]],
        "RAGchain.utils.websearch.google_search.GoogleSearch": [[26, 3, 1, "", "batch"], [26, 3, 1, "", "get_search_data"]]
    },
    "objtypes": {
        "0": "py:module",
        "1": "py:class",
        "2": "py:property",
        "3": "py:method",
        "4": "py:attribute",
        "5": "py:function",
        "6": "py:exception"
    },
    "objnames": {
        "0": ["py", "module", "Python module"],
        "1": ["py", "class", "Python class"],
        "2": ["py", "property", "Python property"],
        "3": ["py", "method", "Python method"],
        "4": ["py", "attribute", "Python attribute"],
        "5": ["py", "function", "Python function"],
        "6": ["py", "exception", "Python exception"]
    },
    "titleterms": {
        "koprivategpt": [],
        "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "subpackag": [0, 2, 8, 11, 14, 21],
        "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "db": 1,
        "submodul": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
        "base": [1, 2, 4, 7, 10, 11, 14, 19, 22, 24, 25, 26],
        "mongo_db": 1,
        "pickle_db": 1,
        "benchmark": [2, 3, 4, 5, 6],
        "util": [21, 22, 23, 24, 25, 26],
        "retriev": [6, 19],
        "main": [],
        "metric": [3, 6],
        "llm": 13,
        "basic": 7,
        "rerank": [7, 11, 12, 13, 14, 15, 16, 17, 18],
        "viscond": 7,
        "pipelin": 7,
        "selector": [],
        "preprocess": [8, 9, 10],
        "loader": 9,
        "dataset_load": 9,
        "excel_load": 9,
        "file_load": 9,
        "hwp_loader": 9,
        "mathpix_markdown_load": 9,
        "nougat_pdf_load": 9,
        "pdf_link_load": 9,
        "text_splitt": 10,
        "rank_gpt": 13,
        "pygaggl": [14, 15],
        "paramet": 14,
        "return": 14,
        "monot5": 14,
        "transform": 14,
        "model": 15,
        "decod": 15,
        "token": 15,
        "tart": 16,
        "modeling_enc_t5": 16,
        "tokenization_enc_t5": 16,
        "upr": 18,
        "bm25_retriev": 19,
        "hybrid": 19,
        "hyde": 19,
        "vectordb_retriev": 19,
        "schema": 20,
        "db_origin": 20,
        "passag": 20,
        "evidence_extractor": 21,
        "file_cach": 21,
        "query_decompos": 21,
        "emb": 23,
        "delete_embed": [],
        "embeddingfactori": 23,
        "linker": 24,
        "redisdbsingleton": [],
        "vectorstor": 25,
        "chroma": 25,
        "pinecon": 25,
        "welcom": 27,
        "": 27,
        "document": 27,
        "indic": 27,
        "tabl": 27,
        "ragchain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28],
        "evalu": 6,
        "auto": 2,
        "dataset": 4,
        "ko_strategy_qa": 4,
        "qasper": 4,
        "strategy_qa": 4,
        "markdown_splitt": [],
        "bm25": 11,
        "evaluate_result": 20,
        "complet": [],
        "code_splitt": 10,
        "html_header_splitt": 10,
        "markdown_header_splitt": 10,
        "token_splitt": 10,
        "answer": 3,
        "msmarco": 4,
        "mr_tydi": 4,
        "prompt": 20,
        "beir": [],
        "natural_qa": [],
        "extra": 5,
        "search_detector_evalu": 5,
        "deepdoctection_load": 9,
        "rede_search_detector": 21,
        "antiqu": 4,
        "nfcorpu": 4,
        "search_qa": 4,
        "triviaqa": 4,
        "rust_hwp_load": 9,
        "win32_hwp_load": 9,
        "asqa": 4,
        "dstc11_track5": 4,
        "time": 17,
        "simple_tim": 17,
        "weighted_tim": 17,
        "semantic_clust": 21,
        "compressor": 22,
        "cluster_tim": 22,
        "dynamo_link": 24,
        "json_link": 24,
        "redis_link": 24,
        "eli5": 4,
        "natural_quest": 4,
        "google_search": [7, 26],
        "rem_load": 9,
        "import": 12,
        "simple_import": 12,
        "weighted_import": 12,
        "llm_lingua": 22,
        "websearch": 26,
        "bing_search": 26,
        "brave_search": [],
        "retrieval_result": 20
    },
    "envversion": {
        "sphinx.domains.c": 3,
        "sphinx.domains.changeset": 1,
        "sphinx.domains.citation": 1,
        "sphinx.domains.cpp": 9,
        "sphinx.domains.index": 1,
        "sphinx.domains.javascript": 3,
        "sphinx.domains.math": 2,
        "sphinx.domains.python": 4,
        "sphinx.domains.rst": 2,
        "sphinx.domains.std": 2,
        "sphinx": 60
    },
    "alltitles": {
        "RAGchain.preprocess package": [[8, "ragchain-preprocess-package"]],
        "Subpackages": [[8, "subpackages"], [0, "subpackages"], [2, "subpackages"], [11, "subpackages"], [14, "subpackages"], [21, "subpackages"]],
        "Module contents": [[8, "module-RAGchain.preprocess"], [15, "module-RAGchain.reranker.pygaggle.model"], [5, "module-RAGchain.benchmark.extra"], [23, "module-RAGchain.utils.embed"], [24, "module-RAGchain.utils.linker"], [0, "module-RAGchain"], [1, "module-RAGchain.DB"], [2, "module-RAGchain.benchmark"], [3, "module-RAGchain.benchmark.answer"], [4, "module-RAGchain.benchmark.dataset"], [6, "module-RAGchain.benchmark.retrieval"], [7, "module-RAGchain.pipeline"], [9, "module-RAGchain.preprocess.loader"], [10, "module-RAGchain.preprocess.text_splitter"], [11, "module-RAGchain.reranker"], [12, "module-RAGchain.reranker.importance"], [13, "module-RAGchain.reranker.llm"], [14, "module-RAGchain.reranker.pygaggle"], [16, "module-RAGchain.reranker.tart"], [17, "module-RAGchain.reranker.time"], [18, "module-RAGchain.reranker.upr"], [19, "module-RAGchain.retrieval"], [20, "module-RAGchain.schema"], [21, "module-RAGchain.utils"], [22, "module-RAGchain.utils.compressor"], [25, "module-RAGchain.utils.vectorstore"], [26, "module-RAGchain.utils.websearch"]],
        "Submodules": [[15, "submodules"], [5, "submodules"], [23, "submodules"], [24, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [6, "submodules"], [7, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [25, "submodules"], [26, "submodules"]],
        "RAGchain.reranker.pygaggle.model package": [[15, "ragchain-reranker-pygaggle-model-package"]],
        "RAGchain.reranker.pygaggle.model.decode module": [[15, "module-RAGchain.reranker.pygaggle.model.decode"]],
        "RAGchain.reranker.pygaggle.model.tokenize module": [[15, "module-RAGchain.reranker.pygaggle.model.tokenize"]],
        "RAGchain": [[28, "ragchain"]],
        "RAGchain.benchmark.extra package": [[5, "ragchain-benchmark-extra-package"]],
        "RAGchain.benchmark.extra.search_detector_evaluator module": [[5, "module-RAGchain.benchmark.extra.search_detector_evaluator"]],
        "RAGchain.utils.embed package": [[23, "ragchain-utils-embed-package"]],
        "RAGchain.utils.embed.embeddingfactory module": [[23, "module-RAGchain.utils.embed.embeddingfactory"]],
        "RAGchain.utils.linker package": [[24, "ragchain-utils-linker-package"]],
        "RAGchain.utils.linker.base module": [[24, "module-RAGchain.utils.linker.base"]],
        "RAGchain.utils.linker.dynamo_linker module": [[24, "module-RAGchain.utils.linker.dynamo_linker"]],
        "RAGchain.utils.linker.json_linker module": [[24, "module-RAGchain.utils.linker.json_linker"]],
        "RAGchain.utils.linker.redis_linker module": [[24, "module-RAGchain.utils.linker.redis_linker"]],
        "RAGchain package": [[0, "ragchain-package"]],
        "RAGchain.DB package": [[1, "ragchain-db-package"]],
        "RAGchain.DB.base module": [[1, "module-RAGchain.DB.base"]],
        "RAGchain.DB.mongo_db module": [[1, "module-RAGchain.DB.mongo_db"]],
        "RAGchain.DB.pickle_db module": [[1, "module-RAGchain.DB.pickle_db"]],
        "RAGchain.benchmark package": [[2, "ragchain-benchmark-package"]],
        "RAGchain.benchmark.auto module": [[2, "module-RAGchain.benchmark.auto"]],
        "RAGchain.benchmark.base module": [[2, "module-RAGchain.benchmark.base"]],
        "RAGchain.benchmark.answer package": [[3, "ragchain-benchmark-answer-package"]],
        "RAGchain.benchmark.answer.metrics module": [[3, "module-RAGchain.benchmark.answer.metrics"]],
        "RAGchain.benchmark.dataset package": [[4, "ragchain-benchmark-dataset-package"]],
        "RAGchain.benchmark.dataset.antique module": [[4, "module-RAGchain.benchmark.dataset.antique"]],
        "RAGchain.benchmark.dataset.asqa module": [[4, "module-RAGchain.benchmark.dataset.asqa"]],
        "RAGchain.benchmark.dataset.base module": [[4, "module-RAGchain.benchmark.dataset.base"]],
        "RAGchain.benchmark.dataset.dstc11_track5 module": [[4, "module-RAGchain.benchmark.dataset.dstc11_track5"]],
        "RAGchain.benchmark.dataset.eli5 module": [[4, "module-RAGchain.benchmark.dataset.eli5"]],
        "RAGchain.benchmark.dataset.ko_strategy_qa module": [[4, "module-RAGchain.benchmark.dataset.ko_strategy_qa"]],
        "RAGchain.benchmark.dataset.mr_tydi module": [[4, "module-RAGchain.benchmark.dataset.mr_tydi"]],
        "RAGchain.benchmark.dataset.msmarco module": [[4, "module-RAGchain.benchmark.dataset.msmarco"]],
        "RAGchain.benchmark.dataset.natural_question module": [[4, "module-RAGchain.benchmark.dataset.natural_question"]],
        "RAGchain.benchmark.dataset.nfcorpus module": [[4, "module-RAGchain.benchmark.dataset.nfcorpus"]],
        "RAGchain.benchmark.dataset.qasper module": [[4, "module-RAGchain.benchmark.dataset.qasper"]],
        "RAGchain.benchmark.dataset.search_qa module": [[4, "module-RAGchain.benchmark.dataset.search_qa"]],
        "RAGchain.benchmark.dataset.strategy_qa module": [[4, "module-RAGchain.benchmark.dataset.strategy_qa"]],
        "RAGchain.benchmark.dataset.triviaqa module": [[4, "module-RAGchain.benchmark.dataset.triviaqa"]],
        "RAGchain.benchmark.retrieval package": [[6, "ragchain-benchmark-retrieval-package"]],
        "RAGchain.benchmark.retrieval.evaluator module": [[6, "module-RAGchain.benchmark.retrieval.evaluator"]],
        "RAGchain.benchmark.retrieval.metrics module": [[6, "module-RAGchain.benchmark.retrieval.metrics"]],
        "RAGchain.pipeline package": [[7, "ragchain-pipeline-package"]],
        "RAGchain.pipeline.base module": [[7, "module-RAGchain.pipeline.base"]],
        "RAGchain.pipeline.basic module": [[7, "module-RAGchain.pipeline.basic"]],
        "RAGchain.pipeline.google_search module": [[7, "module-RAGchain.pipeline.google_search"]],
        "RAGchain.pipeline.rerank module": [[7, "module-RAGchain.pipeline.rerank"]],
        "RAGchain.pipeline.visconde module": [[7, "module-RAGchain.pipeline.visconde"]],
        "RAGchain.preprocess.loader package": [[9, "ragchain-preprocess-loader-package"]],
        "RAGchain.preprocess.loader.dataset_loader module": [[9, "module-RAGchain.preprocess.loader.dataset_loader"]],
        "RAGchain.preprocess.loader.deepdoctection_loader module": [[9, "module-RAGchain.preprocess.loader.deepdoctection_loader"]],
        "RAGchain.preprocess.loader.excel_loader module": [[9, "module-RAGchain.preprocess.loader.excel_loader"]],
        "RAGchain.preprocess.loader.file_loader module": [[9, "module-RAGchain.preprocess.loader.file_loader"]],
        "RAGchain.preprocess.loader.hwp_loader module": [[9, "module-RAGchain.preprocess.loader.hwp_loader"]],
        "RAGchain.preprocess.loader.mathpix_markdown_loader module": [[9, "module-RAGchain.preprocess.loader.mathpix_markdown_loader"]],
        "RAGchain.preprocess.loader.nougat_pdf_loader module": [[9, "module-RAGchain.preprocess.loader.nougat_pdf_loader"]],
        "RAGchain.preprocess.loader.pdf_link_loader module": [[9, "module-RAGchain.preprocess.loader.pdf_link_loader"]],
        "RAGchain.preprocess.loader.rem_loader module": [[9, "module-RAGchain.preprocess.loader.rem_loader"]],
        "RAGchain.preprocess.loader.rust_hwp_loader module": [[9, "module-RAGchain.preprocess.loader.rust_hwp_loader"]],
        "RAGchain.preprocess.loader.win32_hwp_loader module": [[9, "module-RAGchain.preprocess.loader.win32_hwp_loader"]],
        "RAGchain.preprocess.text_splitter package": [[10, "ragchain-preprocess-text-splitter-package"]],
        "RAGchain.preprocess.text_splitter.base module": [[10, "module-RAGchain.preprocess.text_splitter.base"]],
        "RAGchain.preprocess.text_splitter.code_splitter module": [[10, "module-RAGchain.preprocess.text_splitter.code_splitter"]],
        "RAGchain.preprocess.text_splitter.html_header_splitter module": [[10, "module-RAGchain.preprocess.text_splitter.html_header_splitter"]],
        "RAGchain.preprocess.text_splitter.markdown_header_splitter module": [[10, "module-RAGchain.preprocess.text_splitter.markdown_header_splitter"]],
        "RAGchain.preprocess.text_splitter.text_splitter module": [[10, "module-RAGchain.preprocess.text_splitter.text_splitter"]],
        "RAGchain.preprocess.text_splitter.token_splitter module": [[10, "module-RAGchain.preprocess.text_splitter.token_splitter"]],
        "RAGchain.reranker package": [[11, "ragchain-reranker-package"]],
        "RAGchain.reranker.base module": [[11, "module-RAGchain.reranker.base"]],
        "RAGchain.reranker.bm25 module": [[11, "module-RAGchain.reranker.bm25"]],
        "RAGchain.reranker.importance package": [[12, "ragchain-reranker-importance-package"]],
        "RAGchain.reranker.importance.simple_importance module": [[12, "module-RAGchain.reranker.importance.simple_importance"]],
        "RAGchain.reranker.importance.weighted_importance module": [[12, "module-RAGchain.reranker.importance.weighted_importance"]],
        "RAGchain.reranker.llm package": [[13, "ragchain-reranker-llm-package"]],
        "RAGchain.reranker.llm.llm module": [[13, "module-RAGchain.reranker.llm.llm"]],
        "RAGchain.reranker.llm.rank_gpt module": [[13, "module-RAGchain.reranker.llm.rank_gpt"]],
        "RAGchain.reranker.pygaggle package": [[14, "ragchain-reranker-pygaggle-package"]],
        "RAGchain.reranker.pygaggle.base module": [[14, "module-RAGchain.reranker.pygaggle.base"]],
        "Parameters": [[14, "parameters"], [14, "id1"], [14, "id2"], [14, "id3"]],
        "Returns": [[14, "returns"], [14, "id4"]],
        "RAGchain.reranker.pygaggle.monoT5 module": [[14, "module-RAGchain.reranker.pygaggle.monoT5"]],
        "RAGchain.reranker.pygaggle.transformer module": [[14, "module-RAGchain.reranker.pygaggle.transformer"]],
        "RAGchain.reranker.tart package": [[16, "ragchain-reranker-tart-package"]],
        "RAGchain.reranker.tart.modeling_enc_t5 module": [[16, "module-RAGchain.reranker.tart.modeling_enc_t5"]],
        "RAGchain.reranker.tart.tart module": [[16, "module-RAGchain.reranker.tart.tart"]],
        "RAGchain.reranker.tart.tokenization_enc_t5 module": [[16, "module-RAGchain.reranker.tart.tokenization_enc_t5"]],
        "RAGchain.reranker.time package": [[17, "ragchain-reranker-time-package"]],
        "RAGchain.reranker.time.simple_time module": [[17, "module-RAGchain.reranker.time.simple_time"]],
        "RAGchain.reranker.time.weighted_time module": [[17, "module-RAGchain.reranker.time.weighted_time"]],
        "RAGchain.reranker.upr package": [[18, "ragchain-reranker-upr-package"]],
        "RAGchain.reranker.upr.upr module": [[18, "module-RAGchain.reranker.upr.upr"]],
        "RAGchain.retrieval package": [[19, "ragchain-retrieval-package"]],
        "RAGchain.retrieval.base module": [[19, "module-RAGchain.retrieval.base"]],
        "RAGchain.retrieval.bm25_retrieval module": [[19, "module-RAGchain.retrieval.bm25_retrieval"]],
        "RAGchain.retrieval.hybrid module": [[19, "module-RAGchain.retrieval.hybrid"]],
        "RAGchain.retrieval.hyde module": [[19, "module-RAGchain.retrieval.hyde"]],
        "RAGchain.retrieval.vectordb_retrieval module": [[19, "module-RAGchain.retrieval.vectordb_retrieval"]],
        "RAGchain.schema package": [[20, "ragchain-schema-package"]],
        "RAGchain.schema.db_origin module": [[20, "module-RAGchain.schema.db_origin"]],
        "RAGchain.schema.evaluate_result module": [[20, "module-RAGchain.schema.evaluate_result"]],
        "RAGchain.schema.passage module": [[20, "module-RAGchain.schema.passage"]],
        "RAGchain.schema.prompt module": [[20, "module-RAGchain.schema.prompt"]],
        "RAGchain.schema.retrieval_result module": [[20, "module-RAGchain.schema.retrieval_result"]],
        "RAGchain.utils package": [[21, "ragchain-utils-package"]],
        "RAGchain.utils.evidence_extractor module": [[21, "module-RAGchain.utils.evidence_extractor"]],
        "RAGchain.utils.file_cache module": [[21, "module-RAGchain.utils.file_cache"]],
        "RAGchain.utils.query_decompose module": [[21, "module-RAGchain.utils.query_decompose"]],
        "RAGchain.utils.rede_search_detector module": [[21, "module-RAGchain.utils.rede_search_detector"]],
        "RAGchain.utils.semantic_clustering module": [[21, "module-RAGchain.utils.semantic_clustering"]],
        "RAGchain.utils.util module": [[21, "module-RAGchain.utils.util"]],
        "RAGchain.utils.compressor package": [[22, "ragchain-utils-compressor-package"]],
        "RAGchain.utils.compressor.base module": [[22, "module-RAGchain.utils.compressor.base"]],
        "RAGchain.utils.compressor.cluster_time module": [[22, "module-RAGchain.utils.compressor.cluster_time"]],
        "RAGchain.utils.compressor.llm_lingua module": [[22, "module-RAGchain.utils.compressor.llm_lingua"]],
        "RAGchain.utils.vectorstore package": [[25, "ragchain-utils-vectorstore-package"]],
        "RAGchain.utils.vectorstore.base module": [[25, "module-RAGchain.utils.vectorstore.base"]],
        "RAGchain.utils.vectorstore.chroma module": [[25, "module-RAGchain.utils.vectorstore.chroma"]],
        "RAGchain.utils.vectorstore.pinecone module": [[25, "module-RAGchain.utils.vectorstore.pinecone"]],
        "RAGchain.utils.websearch package": [[26, "ragchain-utils-websearch-package"]],
        "RAGchain.utils.websearch.base module": [[26, "module-RAGchain.utils.websearch.base"]],
        "RAGchain.utils.websearch.bing_search module": [[26, "module-RAGchain.utils.websearch.bing_search"]],
        "RAGchain.utils.websearch.google_search module": [[26, "module-RAGchain.utils.websearch.google_search"]],
        "Welcome to RAGchain\u2019s documentation!": [[27, "welcome-to-ragchain-s-documentation"]],
        "Indices and tables": [[27, "indices-and-tables"]]
    },
    "indexentries": {
        "ragchain": [[0, "module-RAGchain"]],
        "module": [[0, "module-RAGchain"], [1, "module-RAGchain.DB"], [1, "module-RAGchain.DB.base"], [1, "module-RAGchain.DB.mongo_db"], [1, "module-RAGchain.DB.pickle_db"], [2, "module-RAGchain.benchmark"], [2, "module-RAGchain.benchmark.auto"], [2, "module-RAGchain.benchmark.base"], [3, "module-RAGchain.benchmark.answer"], [3, "module-RAGchain.benchmark.answer.metrics"], [4, "module-RAGchain.benchmark.dataset"], [4, "module-RAGchain.benchmark.dataset.antique"], [4, "module-RAGchain.benchmark.dataset.asqa"], [4, "module-RAGchain.benchmark.dataset.base"], [4, "module-RAGchain.benchmark.dataset.dstc11_track5"], [4, "module-RAGchain.benchmark.dataset.eli5"], [4, "module-RAGchain.benchmark.dataset.ko_strategy_qa"], [4, "module-RAGchain.benchmark.dataset.mr_tydi"], [4, "module-RAGchain.benchmark.dataset.msmarco"], [4, "module-RAGchain.benchmark.dataset.natural_question"], [4, "module-RAGchain.benchmark.dataset.nfcorpus"], [4, "module-RAGchain.benchmark.dataset.qasper"], [4, "module-RAGchain.benchmark.dataset.search_qa"], [4, "module-RAGchain.benchmark.dataset.strategy_qa"], [4, "module-RAGchain.benchmark.dataset.triviaqa"], [6, "module-RAGchain.benchmark.retrieval"], [6, "module-RAGchain.benchmark.retrieval.evaluator"], [6, "module-RAGchain.benchmark.retrieval.metrics"], [7, "module-RAGchain.pipeline"], [7, "module-RAGchain.pipeline.base"], [7, "module-RAGchain.pipeline.basic"], [7, "module-RAGchain.pipeline.google_search"], [7, "module-RAGchain.pipeline.rerank"], [7, "module-RAGchain.pipeline.visconde"], [8, "module-RAGchain.preprocess"], [9, "module-RAGchain.preprocess.loader"], [9, "module-RAGchain.preprocess.loader.dataset_loader"], [9, "module-RAGchain.preprocess.loader.deepdoctection_loader"], [9, "module-RAGchain.preprocess.loader.excel_loader"], [9, "module-RAGchain.preprocess.loader.file_loader"], [9, "module-RAGchain.preprocess.loader.hwp_loader"], [9, "module-RAGchain.preprocess.loader.mathpix_markdown_loader"], [9, "module-RAGchain.preprocess.loader.nougat_pdf_loader"], [9, "module-RAGchain.preprocess.loader.pdf_link_loader"], [9, "module-RAGchain.preprocess.loader.rem_loader"], [9, "module-RAGchain.preprocess.loader.rust_hwp_loader"], [9, "module-RAGchain.preprocess.loader.win32_hwp_loader"], [10, "module-RAGchain.preprocess.text_splitter"], [10, "module-RAGchain.preprocess.text_splitter.base"], [10, "module-RAGchain.preprocess.text_splitter.code_splitter"], [10, "module-RAGchain.preprocess.text_splitter.html_header_splitter"], [10, "module-RAGchain.preprocess.text_splitter.markdown_header_splitter"], [10, "module-RAGchain.preprocess.text_splitter.text_splitter"], [10, "module-RAGchain.preprocess.text_splitter.token_splitter"], [11, "module-RAGchain.reranker"], [11, "module-RAGchain.reranker.base"], [11, "module-RAGchain.reranker.bm25"], [12, "module-RAGchain.reranker.importance"], [12, "module-RAGchain.reranker.importance.simple_importance"], [12, "module-RAGchain.reranker.importance.weighted_importance"], [13, "module-RAGchain.reranker.llm"], [13, "module-RAGchain.reranker.llm.llm"], [13, "module-RAGchain.reranker.llm.rank_gpt"], [14, "module-RAGchain.reranker.pygaggle"], [14, "module-RAGchain.reranker.pygaggle.base"], [14, "module-RAGchain.reranker.pygaggle.monoT5"], [14, "module-RAGchain.reranker.pygaggle.transformer"], [16, "module-RAGchain.reranker.tart"], [16, "module-RAGchain.reranker.tart.modeling_enc_t5"], [16, "module-RAGchain.reranker.tart.tart"], [16, "module-RAGchain.reranker.tart.tokenization_enc_t5"], [17, "module-RAGchain.reranker.time"], [17, "module-RAGchain.reranker.time.simple_time"], [17, "module-RAGchain.reranker.time.weighted_time"], [18, "module-RAGchain.reranker.upr"], [18, "module-RAGchain.reranker.upr.upr"], [19, "module-RAGchain.retrieval"], [19, "module-RAGchain.retrieval.base"], [19, "module-RAGchain.retrieval.bm25_retrieval"], [19, "module-RAGchain.retrieval.hybrid"], [19, "module-RAGchain.retrieval.hyde"], [19, "module-RAGchain.retrieval.vectordb_retrieval"], [20, "module-RAGchain.schema"], [20, "module-RAGchain.schema.db_origin"], [20, "module-RAGchain.schema.evaluate_result"], [20, "module-RAGchain.schema.passage"], [20, "module-RAGchain.schema.prompt"], [20, "module-RAGchain.schema.retrieval_result"], [21, "module-RAGchain.utils"], [21, "module-RAGchain.utils.evidence_extractor"], [21, "module-RAGchain.utils.file_cache"], [21, "module-RAGchain.utils.query_decompose"], [21, "module-RAGchain.utils.rede_search_detector"], [21, "module-RAGchain.utils.semantic_clustering"], [21, "module-RAGchain.utils.util"], [22, "module-RAGchain.utils.compressor"], [22, "module-RAGchain.utils.compressor.base"], [22, "module-RAGchain.utils.compressor.cluster_time"], [22, "module-RAGchain.utils.compressor.llm_lingua"], [25, "module-RAGchain.utils.vectorstore"], [25, "module-RAGchain.utils.vectorstore.base"], [25, "module-RAGchain.utils.vectorstore.chroma"], [25, "module-RAGchain.utils.vectorstore.pinecone"], [26, "module-RAGchain.utils.websearch"], [26, "module-RAGchain.utils.websearch.base"], [26, "module-RAGchain.utils.websearch.bing_search"], [26, "module-RAGchain.utils.websearch.google_search"]],
        "basedb (class in ragchain.db.base)": [[1, "RAGchain.DB.base.BaseDB"]],
        "inputtype (ragchain.db.base.basedb property)": [[1, "RAGchain.DB.base.BaseDB.InputType"]],
        "mongodb (class in ragchain.db.mongo_db)": [[1, "RAGchain.DB.mongo_db.MongoDB"]],
        "outputtype (ragchain.db.base.basedb property)": [[1, "RAGchain.DB.base.BaseDB.OutputType"]],
        "pickledb (class in ragchain.db.pickle_db)": [[1, "RAGchain.DB.pickle_db.PickleDB"]],
        "ragchain.db": [[1, "module-RAGchain.DB"]],
        "ragchain.db.base": [[1, "module-RAGchain.DB.base"]],
        "ragchain.db.mongo_db": [[1, "module-RAGchain.DB.mongo_db"]],
        "ragchain.db.pickle_db": [[1, "module-RAGchain.DB.pickle_db"]],
        "create() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.create"]],
        "create() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.create"]],
        "create() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.create"]],
        "create_or_load() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.create_or_load"]],
        "create_or_load() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.create_or_load"]],
        "create_or_load() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.create_or_load"]],
        "db_type (ragchain.db.base.basedb property)": [[1, "RAGchain.DB.base.BaseDB.db_type"]],
        "db_type (ragchain.db.mongo_db.mongodb property)": [[1, "RAGchain.DB.mongo_db.MongoDB.db_type"]],
        "db_type (ragchain.db.pickle_db.pickledb property)": [[1, "RAGchain.DB.pickle_db.PickleDB.db_type"]],
        "fetch() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.fetch"]],
        "fetch() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.fetch"]],
        "fetch() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.fetch"]],
        "get_db_origin() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.get_db_origin"]],
        "get_db_origin() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.get_db_origin"]],
        "get_db_origin() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.get_db_origin"]],
        "invoke() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.invoke"]],
        "load() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.load"]],
        "load() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.load"]],
        "load() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.load"]],
        "save() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.save"]],
        "save() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.save"]],
        "save() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.save"]],
        "search() (ragchain.db.base.basedb method)": [[1, "RAGchain.DB.base.BaseDB.search"]],
        "search() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.search"]],
        "search() (ragchain.db.pickle_db.pickledb method)": [[1, "RAGchain.DB.pickle_db.PickleDB.search"]],
        "set_db() (ragchain.db.mongo_db.mongodb method)": [[1, "RAGchain.DB.mongo_db.MongoDB.set_db"]],
        "autoevaluator (class in ragchain.benchmark.auto)": [[2, "RAGchain.benchmark.auto.AutoEvaluator"]],
        "baseevaluator (class in ragchain.benchmark.base)": [[2, "RAGchain.benchmark.base.BaseEvaluator"]],
        "dummyretrieval (class in ragchain.benchmark.base)": [[2, "RAGchain.benchmark.base.DummyRetrieval"]],
        "ragchain.benchmark": [[2, "module-RAGchain.benchmark"]],
        "ragchain.benchmark.auto": [[2, "module-RAGchain.benchmark.auto"]],
        "ragchain.benchmark.base": [[2, "module-RAGchain.benchmark.base"]],
        "answer_gt_metrics (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.answer_gt_metrics"]],
        "answer_no_gt_ragas_metrics (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.answer_no_gt_ragas_metrics"]],
        "answer_passage_metrics (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.answer_passage_metrics"]],
        "delete() (ragchain.benchmark.base.dummyretrieval method)": [[2, "RAGchain.benchmark.base.DummyRetrieval.delete"]],
        "evaluate() (ragchain.benchmark.auto.autoevaluator method)": [[2, "RAGchain.benchmark.auto.AutoEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.base.baseevaluator method)": [[2, "RAGchain.benchmark.base.BaseEvaluator.evaluate"]],
        "ingest() (ragchain.benchmark.base.dummyretrieval method)": [[2, "RAGchain.benchmark.base.DummyRetrieval.ingest"]],
        "retrieval_gt_metrics (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.retrieval_gt_metrics"]],
        "retrieval_gt_metrics_rank_aware (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.retrieval_gt_metrics_rank_aware"]],
        "retrieval_gt_ragas_metrics (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.retrieval_gt_ragas_metrics"]],
        "retrieval_no_gt_ragas_metrics (ragchain.benchmark.base.baseevaluator attribute)": [[2, "RAGchain.benchmark.base.BaseEvaluator.retrieval_no_gt_ragas_metrics"]],
        "retrieve() (ragchain.benchmark.base.dummyretrieval method)": [[2, "RAGchain.benchmark.base.DummyRetrieval.retrieve"]],
        "retrieve_id() (ragchain.benchmark.base.dummyretrieval method)": [[2, "RAGchain.benchmark.base.DummyRetrieval.retrieve_id"]],
        "retrieve_id_with_scores() (ragchain.benchmark.base.dummyretrieval method)": [[2, "RAGchain.benchmark.base.DummyRetrieval.retrieve_id_with_scores"]],
        "uuid_to_str() (ragchain.benchmark.base.baseevaluator static method)": [[2, "RAGchain.benchmark.base.BaseEvaluator.uuid_to_str"]],
        "bleu (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.BLEU"]],
        "baseanswermetric (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.BaseAnswerMetric"]],
        "basepassageanswermetric (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.BasePassageAnswerMetric"]],
        "em_answer (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.EM_answer"]],
        "kf1 (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.KF1"]],
        "meteor (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.METEOR"]],
        "ragchain.benchmark.answer": [[3, "module-RAGchain.benchmark.answer"]],
        "ragchain.benchmark.answer.metrics": [[3, "module-RAGchain.benchmark.answer.metrics"]],
        "rouge (class in ragchain.benchmark.answer.metrics)": [[3, "RAGchain.benchmark.answer.metrics.ROUGE"]],
        "eval() (ragchain.benchmark.answer.metrics.baseanswermetric method)": [[3, "RAGchain.benchmark.answer.metrics.BaseAnswerMetric.eval"]],
        "eval() (ragchain.benchmark.answer.metrics.basepassageanswermetric method)": [[3, "RAGchain.benchmark.answer.metrics.BasePassageAnswerMetric.eval"]],
        "metric_name (ragchain.benchmark.answer.metrics.baseanswermetric property)": [[3, "RAGchain.benchmark.answer.metrics.BaseAnswerMetric.metric_name"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.bleu method)": [[3, "RAGchain.benchmark.answer.metrics.BLEU.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.baseanswermetric method)": [[3, "RAGchain.benchmark.answer.metrics.BaseAnswerMetric.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.basepassageanswermetric method)": [[3, "RAGchain.benchmark.answer.metrics.BasePassageAnswerMetric.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.em_answer method)": [[3, "RAGchain.benchmark.answer.metrics.EM_answer.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.kf1 method)": [[3, "RAGchain.benchmark.answer.metrics.KF1.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.meteor method)": [[3, "RAGchain.benchmark.answer.metrics.METEOR.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.answer.metrics.rouge method)": [[3, "RAGchain.benchmark.answer.metrics.ROUGE.retrieval_metric_function"]],
        "asqaevaluator (class in ragchain.benchmark.dataset.asqa)": [[4, "RAGchain.benchmark.dataset.asqa.ASQAEvaluator"]],
        "antiqueevaluator (class in ragchain.benchmark.dataset.antique)": [[4, "RAGchain.benchmark.dataset.antique.AntiqueEvaluator"]],
        "basedatasetevaluator (class in ragchain.benchmark.dataset.base)": [[4, "RAGchain.benchmark.dataset.base.BaseDatasetEvaluator"]],
        "basestrategyqa (class in ragchain.benchmark.dataset.base)": [[4, "RAGchain.benchmark.dataset.base.BaseStrategyQA"]],
        "dstc11track5evaluator (class in ragchain.benchmark.dataset.dstc11_track5)": [[4, "RAGchain.benchmark.dataset.dstc11_track5.DSTC11Track5Evaluator"]],
        "eli5evaluator (class in ragchain.benchmark.dataset.eli5)": [[4, "RAGchain.benchmark.dataset.eli5.Eli5Evaluator"]],
        "kostrategyqaevaluator (class in ragchain.benchmark.dataset.ko_strategy_qa)": [[4, "RAGchain.benchmark.dataset.ko_strategy_qa.KoStrategyQAEvaluator"]],
        "msmarcoevaluator (class in ragchain.benchmark.dataset.msmarco)": [[4, "RAGchain.benchmark.dataset.msmarco.MSMARCOEvaluator"]],
        "mrtydievaluator (class in ragchain.benchmark.dataset.mr_tydi)": [[4, "RAGchain.benchmark.dataset.mr_tydi.MrTydiEvaluator"]],
        "nfcorpusevaluator (class in ragchain.benchmark.dataset.nfcorpus)": [[4, "RAGchain.benchmark.dataset.nfcorpus.NFCorpusEvaluator"]],
        "naturalqaevaluator (class in ragchain.benchmark.dataset.natural_question)": [[4, "RAGchain.benchmark.dataset.natural_question.NaturalQAEvaluator"]],
        "qasperevaluator (class in ragchain.benchmark.dataset.qasper)": [[4, "RAGchain.benchmark.dataset.qasper.QasperEvaluator"]],
        "ragchain.benchmark.dataset": [[4, "module-RAGchain.benchmark.dataset"]],
        "ragchain.benchmark.dataset.antique": [[4, "module-RAGchain.benchmark.dataset.antique"]],
        "ragchain.benchmark.dataset.asqa": [[4, "module-RAGchain.benchmark.dataset.asqa"]],
        "ragchain.benchmark.dataset.base": [[4, "module-RAGchain.benchmark.dataset.base"]],
        "ragchain.benchmark.dataset.dstc11_track5": [[4, "module-RAGchain.benchmark.dataset.dstc11_track5"]],
        "ragchain.benchmark.dataset.eli5": [[4, "module-RAGchain.benchmark.dataset.eli5"]],
        "ragchain.benchmark.dataset.ko_strategy_qa": [[4, "module-RAGchain.benchmark.dataset.ko_strategy_qa"]],
        "ragchain.benchmark.dataset.mr_tydi": [[4, "module-RAGchain.benchmark.dataset.mr_tydi"]],
        "ragchain.benchmark.dataset.msmarco": [[4, "module-RAGchain.benchmark.dataset.msmarco"]],
        "ragchain.benchmark.dataset.natural_question": [[4, "module-RAGchain.benchmark.dataset.natural_question"]],
        "ragchain.benchmark.dataset.nfcorpus": [[4, "module-RAGchain.benchmark.dataset.nfcorpus"]],
        "ragchain.benchmark.dataset.qasper": [[4, "module-RAGchain.benchmark.dataset.qasper"]],
        "ragchain.benchmark.dataset.search_qa": [[4, "module-RAGchain.benchmark.dataset.search_qa"]],
        "ragchain.benchmark.dataset.strategy_qa": [[4, "module-RAGchain.benchmark.dataset.strategy_qa"]],
        "ragchain.benchmark.dataset.triviaqa": [[4, "module-RAGchain.benchmark.dataset.triviaqa"]],
        "searchqaevaluator (class in ragchain.benchmark.dataset.search_qa)": [[4, "RAGchain.benchmark.dataset.search_qa.SearchQAEvaluator"]],
        "strategyqaevaluator (class in ragchain.benchmark.dataset.strategy_qa)": [[4, "RAGchain.benchmark.dataset.strategy_qa.StrategyQAEvaluator"]],
        "triviaqaevaluator (class in ragchain.benchmark.dataset.triviaqa)": [[4, "RAGchain.benchmark.dataset.triviaqa.TriviaQAEvaluator"]],
        "convert_qa_to_pd() (ragchain.benchmark.dataset.base.basestrategyqa method)": [[4, "RAGchain.benchmark.dataset.base.BaseStrategyQA.convert_qa_to_pd"]],
        "dataset_name (ragchain.benchmark.dataset.ko_strategy_qa.kostrategyqaevaluator attribute)": [[4, "RAGchain.benchmark.dataset.ko_strategy_qa.KoStrategyQAEvaluator.dataset_name"]],
        "dataset_name (ragchain.benchmark.dataset.qasper.qasperevaluator attribute)": [[4, "RAGchain.benchmark.dataset.qasper.QasperEvaluator.dataset_name"]],
        "dataset_name (ragchain.benchmark.dataset.strategy_qa.strategyqaevaluator attribute)": [[4, "RAGchain.benchmark.dataset.strategy_qa.StrategyQAEvaluator.dataset_name"]],
        "evaluate() (ragchain.benchmark.dataset.antique.antiqueevaluator method)": [[4, "RAGchain.benchmark.dataset.antique.AntiqueEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.asqa.asqaevaluator method)": [[4, "RAGchain.benchmark.dataset.asqa.ASQAEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.dstc11_track5.dstc11track5evaluator method)": [[4, "RAGchain.benchmark.dataset.dstc11_track5.DSTC11Track5Evaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.eli5.eli5evaluator method)": [[4, "RAGchain.benchmark.dataset.eli5.Eli5Evaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.ko_strategy_qa.kostrategyqaevaluator method)": [[4, "RAGchain.benchmark.dataset.ko_strategy_qa.KoStrategyQAEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.mr_tydi.mrtydievaluator method)": [[4, "RAGchain.benchmark.dataset.mr_tydi.MrTydiEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.msmarco.msmarcoevaluator method)": [[4, "RAGchain.benchmark.dataset.msmarco.MSMARCOEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.natural_question.naturalqaevaluator method)": [[4, "RAGchain.benchmark.dataset.natural_question.NaturalQAEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.nfcorpus.nfcorpusevaluator method)": [[4, "RAGchain.benchmark.dataset.nfcorpus.NFCorpusEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.qasper.qasperevaluator method)": [[4, "RAGchain.benchmark.dataset.qasper.QasperEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.search_qa.searchqaevaluator method)": [[4, "RAGchain.benchmark.dataset.search_qa.SearchQAEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.strategy_qa.strategyqaevaluator method)": [[4, "RAGchain.benchmark.dataset.strategy_qa.StrategyQAEvaluator.evaluate"]],
        "evaluate() (ragchain.benchmark.dataset.triviaqa.triviaqaevaluator method)": [[4, "RAGchain.benchmark.dataset.triviaqa.TriviaQAEvaluator.evaluate"]],
        "ingest() (ragchain.benchmark.dataset.antique.antiqueevaluator method)": [[4, "RAGchain.benchmark.dataset.antique.AntiqueEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.asqa.asqaevaluator method)": [[4, "RAGchain.benchmark.dataset.asqa.ASQAEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.base.basedatasetevaluator method)": [[4, "RAGchain.benchmark.dataset.base.BaseDatasetEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.dstc11_track5.dstc11track5evaluator method)": [[4, "RAGchain.benchmark.dataset.dstc11_track5.DSTC11Track5Evaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.eli5.eli5evaluator method)": [[4, "RAGchain.benchmark.dataset.eli5.Eli5Evaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.ko_strategy_qa.kostrategyqaevaluator method)": [[4, "RAGchain.benchmark.dataset.ko_strategy_qa.KoStrategyQAEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.mr_tydi.mrtydievaluator method)": [[4, "RAGchain.benchmark.dataset.mr_tydi.MrTydiEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.msmarco.msmarcoevaluator method)": [[4, "RAGchain.benchmark.dataset.msmarco.MSMARCOEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.natural_question.naturalqaevaluator method)": [[4, "RAGchain.benchmark.dataset.natural_question.NaturalQAEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.nfcorpus.nfcorpusevaluator method)": [[4, "RAGchain.benchmark.dataset.nfcorpus.NFCorpusEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.qasper.qasperevaluator method)": [[4, "RAGchain.benchmark.dataset.qasper.QasperEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.search_qa.searchqaevaluator method)": [[4, "RAGchain.benchmark.dataset.search_qa.SearchQAEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.strategy_qa.strategyqaevaluator method)": [[4, "RAGchain.benchmark.dataset.strategy_qa.StrategyQAEvaluator.ingest"]],
        "ingest() (ragchain.benchmark.dataset.triviaqa.triviaqaevaluator method)": [[4, "RAGchain.benchmark.dataset.triviaqa.TriviaQAEvaluator.ingest"]],
        "preprocess() (ragchain.benchmark.dataset.qasper.qasperevaluator method)": [[4, "RAGchain.benchmark.dataset.qasper.QasperEvaluator.preprocess"]],
        "ap (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.AP"]],
        "baseretrievalmetric (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.BaseRetrievalMetric"]],
        "cg (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.CG"]],
        "dcg (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.DCG"]],
        "em_retrieval (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.EM_retrieval"]],
        "f1 (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.F1"]],
        "hole (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.Hole"]],
        "idcg (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.IDCG"]],
        "inddcg (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.IndDCG"]],
        "indidcg (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.IndIDCG"]],
        "ndcg (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.NDCG"]],
        "precision (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.Precision"]],
        "ragchain.benchmark.retrieval": [[6, "module-RAGchain.benchmark.retrieval"]],
        "ragchain.benchmark.retrieval.evaluator": [[6, "module-RAGchain.benchmark.retrieval.evaluator"]],
        "ragchain.benchmark.retrieval.metrics": [[6, "module-RAGchain.benchmark.retrieval.metrics"]],
        "rr (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.RR"]],
        "recall (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.Recall"]],
        "topkaccuracy (class in ragchain.benchmark.retrieval.metrics)": [[6, "RAGchain.benchmark.retrieval.metrics.TopKAccuracy"]],
        "basic_retrieval_evaluation() (in module ragchain.benchmark.retrieval.evaluator)": [[6, "RAGchain.benchmark.retrieval.evaluator.basic_retrieval_evaluation"]],
        "check_retrieval_eval() (in module ragchain.benchmark.retrieval.evaluator)": [[6, "RAGchain.benchmark.retrieval.evaluator.check_retrieval_eval"]],
        "eval() (ragchain.benchmark.retrieval.metrics.baseretrievalmetric method)": [[6, "RAGchain.benchmark.retrieval.metrics.BaseRetrievalMetric.eval"]],
        "metric_name (ragchain.benchmark.retrieval.metrics.baseretrievalmetric property)": [[6, "RAGchain.benchmark.retrieval.metrics.BaseRetrievalMetric.metric_name"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.ap method)": [[6, "RAGchain.benchmark.retrieval.metrics.AP.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.baseretrievalmetric method)": [[6, "RAGchain.benchmark.retrieval.metrics.BaseRetrievalMetric.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.cg method)": [[6, "RAGchain.benchmark.retrieval.metrics.CG.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.dcg method)": [[6, "RAGchain.benchmark.retrieval.metrics.DCG.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.em_retrieval method)": [[6, "RAGchain.benchmark.retrieval.metrics.EM_retrieval.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.f1 method)": [[6, "RAGchain.benchmark.retrieval.metrics.F1.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.hole method)": [[6, "RAGchain.benchmark.retrieval.metrics.Hole.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.idcg method)": [[6, "RAGchain.benchmark.retrieval.metrics.IDCG.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.inddcg method)": [[6, "RAGchain.benchmark.retrieval.metrics.IndDCG.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.indidcg method)": [[6, "RAGchain.benchmark.retrieval.metrics.IndIDCG.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.ndcg method)": [[6, "RAGchain.benchmark.retrieval.metrics.NDCG.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.precision method)": [[6, "RAGchain.benchmark.retrieval.metrics.Precision.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.rr method)": [[6, "RAGchain.benchmark.retrieval.metrics.RR.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.recall method)": [[6, "RAGchain.benchmark.retrieval.metrics.Recall.retrieval_metric_function"]],
        "retrieval_metric_function() (ragchain.benchmark.retrieval.metrics.topkaccuracy method)": [[6, "RAGchain.benchmark.retrieval.metrics.TopKAccuracy.retrieval_metric_function"]],
        "stretagyqa_k_eval() (in module ragchain.benchmark.retrieval.evaluator)": [[6, "RAGchain.benchmark.retrieval.evaluator.stretagyqa_k_eval"]],
        "stretagyqa_retrieval_evaluation() (in module ragchain.benchmark.retrieval.evaluator)": [[6, "RAGchain.benchmark.retrieval.evaluator.stretagyqa_retrieval_evaluation"]],
        "baseingestpipeline (class in ragchain.pipeline.base)": [[7, "RAGchain.pipeline.base.BaseIngestPipeline"]],
        "baserunpipeline (class in ragchain.pipeline.base)": [[7, "RAGchain.pipeline.base.BaseRunPipeline"]],
        "basicingestpipeline (class in ragchain.pipeline.basic)": [[7, "RAGchain.pipeline.basic.BasicIngestPipeline"]],
        "basicrunpipeline (class in ragchain.pipeline.basic)": [[7, "RAGchain.pipeline.basic.BasicRunPipeline"]],
        "googlesearchrunpipeline (class in ragchain.pipeline.google_search)": [[7, "RAGchain.pipeline.google_search.GoogleSearchRunPipeline"]],
        "ragchain.pipeline": [[7, "module-RAGchain.pipeline"]],
        "ragchain.pipeline.base": [[7, "module-RAGchain.pipeline.base"]],
        "ragchain.pipeline.basic": [[7, "module-RAGchain.pipeline.basic"]],
        "ragchain.pipeline.google_search": [[7, "module-RAGchain.pipeline.google_search"]],
        "ragchain.pipeline.rerank": [[7, "module-RAGchain.pipeline.rerank"]],
        "ragchain.pipeline.visconde": [[7, "module-RAGchain.pipeline.visconde"]],
        "rerankrunpipeline (class in ragchain.pipeline.rerank)": [[7, "RAGchain.pipeline.rerank.RerankRunPipeline"]],
        "visconderunpipeline (class in ragchain.pipeline.visconde)": [[7, "RAGchain.pipeline.visconde.ViscondeRunPipeline"]],
        "default_chat_prompt (ragchain.pipeline.base.baserunpipeline attribute)": [[7, "RAGchain.pipeline.base.BaseRunPipeline.default_chat_prompt"]],
        "default_prompt (ragchain.pipeline.base.baserunpipeline attribute)": [[7, "RAGchain.pipeline.base.BaseRunPipeline.default_prompt"]],
        "get_passages_and_run() (ragchain.pipeline.base.baserunpipeline method)": [[7, "RAGchain.pipeline.base.BaseRunPipeline.get_passages_and_run"]],
        "get_passages_and_run() (ragchain.pipeline.basic.basicrunpipeline method)": [[7, "RAGchain.pipeline.basic.BasicRunPipeline.get_passages_and_run"]],
        "get_passages_and_run() (ragchain.pipeline.google_search.googlesearchrunpipeline method)": [[7, "RAGchain.pipeline.google_search.GoogleSearchRunPipeline.get_passages_and_run"]],
        "get_passages_and_run() (ragchain.pipeline.rerank.rerankrunpipeline method)": [[7, "RAGchain.pipeline.rerank.RerankRunPipeline.get_passages_and_run"]],
        "get_passages_and_run() (ragchain.pipeline.visconde.visconderunpipeline method)": [[7, "RAGchain.pipeline.visconde.ViscondeRunPipeline.get_passages_and_run"]],
        "run (ragchain.pipeline.basic.basicrunpipeline attribute)": [[7, "RAGchain.pipeline.basic.BasicRunPipeline.run"]],
        "run (ragchain.pipeline.google_search.googlesearchrunpipeline attribute)": [[7, "RAGchain.pipeline.google_search.GoogleSearchRunPipeline.run"]],
        "run (ragchain.pipeline.rerank.rerankrunpipeline attribute)": [[7, "RAGchain.pipeline.rerank.RerankRunPipeline.run"]],
        "run (ragchain.pipeline.visconde.visconderunpipeline attribute)": [[7, "RAGchain.pipeline.visconde.ViscondeRunPipeline.run"]],
        "strategyqa_prompt (ragchain.pipeline.visconde.visconderunpipeline attribute)": [[7, "RAGchain.pipeline.visconde.ViscondeRunPipeline.strategyqa_prompt"]],
        "ragchain.preprocess": [[8, "module-RAGchain.preprocess"]],
        "deepdoctectionpdfloader (class in ragchain.preprocess.loader.deepdoctection_loader)": [[9, "RAGchain.preprocess.loader.deepdoctection_loader.DeepdoctectionPDFLoader"]],
        "excelloader (class in ragchain.preprocess.loader.excel_loader)": [[9, "RAGchain.preprocess.loader.excel_loader.ExcelLoader"]],
        "fileloader (class in ragchain.preprocess.loader.file_loader)": [[9, "RAGchain.preprocess.loader.file_loader.FileLoader"]],
        "hwploader (class in ragchain.preprocess.loader.hwp_loader)": [[9, "RAGchain.preprocess.loader.hwp_loader.HwpLoader"]],
        "kostrategyqaloader (class in ragchain.preprocess.loader.dataset_loader)": [[9, "RAGchain.preprocess.loader.dataset_loader.KoStrategyQALoader"]],
        "mathpixmarkdownloader (class in ragchain.preprocess.loader.mathpix_markdown_loader)": [[9, "RAGchain.preprocess.loader.mathpix_markdown_loader.MathpixMarkdownLoader"]],
        "nougatpdfloader (class in ragchain.preprocess.loader.nougat_pdf_loader)": [[9, "RAGchain.preprocess.loader.nougat_pdf_loader.NougatPDFLoader"]],
        "pdflinkloader (class in ragchain.preprocess.loader.pdf_link_loader)": [[9, "RAGchain.preprocess.loader.pdf_link_loader.PdfLinkLoader"]],
        "ragchain.preprocess.loader": [[9, "module-RAGchain.preprocess.loader"]],
        "ragchain.preprocess.loader.dataset_loader": [[9, "module-RAGchain.preprocess.loader.dataset_loader"]],
        "ragchain.preprocess.loader.deepdoctection_loader": [[9, "module-RAGchain.preprocess.loader.deepdoctection_loader"]],
        "ragchain.preprocess.loader.excel_loader": [[9, "module-RAGchain.preprocess.loader.excel_loader"]],
        "ragchain.preprocess.loader.file_loader": [[9, "module-RAGchain.preprocess.loader.file_loader"]],
        "ragchain.preprocess.loader.hwp_loader": [[9, "module-RAGchain.preprocess.loader.hwp_loader"]],
        "ragchain.preprocess.loader.mathpix_markdown_loader": [[9, "module-RAGchain.preprocess.loader.mathpix_markdown_loader"]],
        "ragchain.preprocess.loader.nougat_pdf_loader": [[9, "module-RAGchain.preprocess.loader.nougat_pdf_loader"]],
        "ragchain.preprocess.loader.pdf_link_loader": [[9, "module-RAGchain.preprocess.loader.pdf_link_loader"]],
        "ragchain.preprocess.loader.rem_loader": [[9, "module-RAGchain.preprocess.loader.rem_loader"]],
        "ragchain.preprocess.loader.rust_hwp_loader": [[9, "module-RAGchain.preprocess.loader.rust_hwp_loader"]],
        "ragchain.preprocess.loader.win32_hwp_loader": [[9, "module-RAGchain.preprocess.loader.win32_hwp_loader"]],
        "remloader (class in ragchain.preprocess.loader.rem_loader)": [[9, "RAGchain.preprocess.loader.rem_loader.RemLoader"]],
        "rusthwploader (class in ragchain.preprocess.loader.rust_hwp_loader)": [[9, "RAGchain.preprocess.loader.rust_hwp_loader.RustHwpLoader"]],
        "win32hwploader (class in ragchain.preprocess.loader.win32_hwp_loader)": [[9, "RAGchain.preprocess.loader.win32_hwp_loader.Win32HwpLoader"]],
        "async_request() (ragchain.preprocess.loader.hwp_loader.hwploader method)": [[9, "RAGchain.preprocess.loader.hwp_loader.HwpLoader.async_request"]],
        "convert_hwp_to_hwpx() (ragchain.preprocess.loader.win32_hwp_loader.win32hwploader static method)": [[9, "RAGchain.preprocess.loader.win32_hwp_loader.Win32HwpLoader.convert_hwp_to_hwpx"]],
        "extract_pages() (ragchain.preprocess.loader.deepdoctection_loader.deepdoctectionpdfloader method)": [[9, "RAGchain.preprocess.loader.deepdoctection_loader.DeepdoctectionPDFLoader.extract_pages"]],
        "find_positions() (ragchain.preprocess.loader.deepdoctection_loader.deepdoctectionpdfloader static method)": [[9, "RAGchain.preprocess.loader.deepdoctection_loader.DeepdoctectionPDFLoader.find_positions"]],
        "lazy_load() (ragchain.preprocess.loader.deepdoctection_loader.deepdoctectionpdfloader method)": [[9, "RAGchain.preprocess.loader.deepdoctection_loader.DeepdoctectionPDFLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.excel_loader.excelloader method)": [[9, "RAGchain.preprocess.loader.excel_loader.ExcelLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.file_loader.fileloader method)": [[9, "RAGchain.preprocess.loader.file_loader.FileLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.hwp_loader.hwploader method)": [[9, "RAGchain.preprocess.loader.hwp_loader.HwpLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.mathpix_markdown_loader.mathpixmarkdownloader method)": [[9, "RAGchain.preprocess.loader.mathpix_markdown_loader.MathpixMarkdownLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.nougat_pdf_loader.nougatpdfloader method)": [[9, "RAGchain.preprocess.loader.nougat_pdf_loader.NougatPDFLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.rem_loader.remloader method)": [[9, "RAGchain.preprocess.loader.rem_loader.RemLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.rust_hwp_loader.rusthwploader method)": [[9, "RAGchain.preprocess.loader.rust_hwp_loader.RustHwpLoader.lazy_load"]],
        "lazy_load() (ragchain.preprocess.loader.win32_hwp_loader.win32hwploader method)": [[9, "RAGchain.preprocess.loader.win32_hwp_loader.Win32HwpLoader.lazy_load"]],
        "load() (ragchain.preprocess.loader.dataset_loader.kostrategyqaloader method)": [[9, "RAGchain.preprocess.loader.dataset_loader.KoStrategyQALoader.load"]],
        "load() (ragchain.preprocess.loader.deepdoctection_loader.deepdoctectionpdfloader method)": [[9, "RAGchain.preprocess.loader.deepdoctection_loader.DeepdoctectionPDFLoader.load"]],
        "load() (ragchain.preprocess.loader.excel_loader.excelloader method)": [[9, "RAGchain.preprocess.loader.excel_loader.ExcelLoader.load"]],
        "load() (ragchain.preprocess.loader.file_loader.fileloader method)": [[9, "RAGchain.preprocess.loader.file_loader.FileLoader.load"]],
        "load() (ragchain.preprocess.loader.hwp_loader.hwploader method)": [[9, "RAGchain.preprocess.loader.hwp_loader.HwpLoader.load"]],
        "load() (ragchain.preprocess.loader.mathpix_markdown_loader.mathpixmarkdownloader method)": [[9, "RAGchain.preprocess.loader.mathpix_markdown_loader.MathpixMarkdownLoader.load"]],
        "load() (ragchain.preprocess.loader.nougat_pdf_loader.nougatpdfloader method)": [[9, "RAGchain.preprocess.loader.nougat_pdf_loader.NougatPDFLoader.load"]],
        "load() (ragchain.preprocess.loader.pdf_link_loader.pdflinkloader method)": [[9, "RAGchain.preprocess.loader.pdf_link_loader.PdfLinkLoader.load"]],
        "load() (ragchain.preprocess.loader.rem_loader.remloader method)": [[9, "RAGchain.preprocess.loader.rem_loader.RemLoader.load"]],
        "load() (ragchain.preprocess.loader.rust_hwp_loader.rusthwploader method)": [[9, "RAGchain.preprocess.loader.rust_hwp_loader.RustHwpLoader.load"]],
        "load() (ragchain.preprocess.loader.win32_hwp_loader.win32hwploader method)": [[9, "RAGchain.preprocess.loader.win32_hwp_loader.Win32HwpLoader.load"]],
        "preprocessor() (ragchain.preprocess.loader.win32_hwp_loader.win32hwploader method)": [[9, "RAGchain.preprocess.loader.win32_hwp_loader.Win32HwpLoader.preprocessor"]],
        "split_section() (ragchain.preprocess.loader.mathpix_markdown_loader.mathpixmarkdownloader static method)": [[9, "RAGchain.preprocess.loader.mathpix_markdown_loader.MathpixMarkdownLoader.split_section"]],
        "split_table() (ragchain.preprocess.loader.mathpix_markdown_loader.mathpixmarkdownloader static method)": [[9, "RAGchain.preprocess.loader.mathpix_markdown_loader.MathpixMarkdownLoader.split_table"]],
        "valid_url() (ragchain.preprocess.loader.pdf_link_loader.pdflinkloader static method)": [[9, "RAGchain.preprocess.loader.pdf_link_loader.PdfLinkLoader.valid_url"]],
        "basetextsplitter (class in ragchain.preprocess.text_splitter.base)": [[10, "RAGchain.preprocess.text_splitter.base.BaseTextSplitter"]],
        "codesplitter (class in ragchain.preprocess.text_splitter.code_splitter)": [[10, "RAGchain.preprocess.text_splitter.code_splitter.CodeSplitter"]],
        "htmlheadersplitter (class in ragchain.preprocess.text_splitter.html_header_splitter)": [[10, "RAGchain.preprocess.text_splitter.html_header_splitter.HTMLHeaderSplitter"]],
        "inputtype (ragchain.preprocess.text_splitter.base.basetextsplitter property)": [[10, "RAGchain.preprocess.text_splitter.base.BaseTextSplitter.InputType"]],
        "markdownheadersplitter (class in ragchain.preprocess.text_splitter.markdown_header_splitter)": [[10, "RAGchain.preprocess.text_splitter.markdown_header_splitter.MarkDownHeaderSplitter"]],
        "outputtype (ragchain.preprocess.text_splitter.base.basetextsplitter property)": [[10, "RAGchain.preprocess.text_splitter.base.BaseTextSplitter.OutputType"]],
        "ragchain.preprocess.text_splitter": [[10, "module-RAGchain.preprocess.text_splitter"]],
        "ragchain.preprocess.text_splitter.base": [[10, "module-RAGchain.preprocess.text_splitter.base"]],
        "ragchain.preprocess.text_splitter.code_splitter": [[10, "module-RAGchain.preprocess.text_splitter.code_splitter"]],
        "ragchain.preprocess.text_splitter.html_header_splitter": [[10, "module-RAGchain.preprocess.text_splitter.html_header_splitter"]],
        "ragchain.preprocess.text_splitter.markdown_header_splitter": [[10, "module-RAGchain.preprocess.text_splitter.markdown_header_splitter"]],
        "ragchain.preprocess.text_splitter.text_splitter": [[10, "module-RAGchain.preprocess.text_splitter.text_splitter"]],
        "ragchain.preprocess.text_splitter.token_splitter": [[10, "module-RAGchain.preprocess.text_splitter.token_splitter"]],
        "recursivetextsplitter (class in ragchain.preprocess.text_splitter.text_splitter)": [[10, "RAGchain.preprocess.text_splitter.text_splitter.RecursiveTextSplitter"]],
        "tokensplitter (class in ragchain.preprocess.text_splitter.token_splitter)": [[10, "RAGchain.preprocess.text_splitter.token_splitter.TokenSplitter"]],
        "invoke() (ragchain.preprocess.text_splitter.base.basetextsplitter method)": [[10, "RAGchain.preprocess.text_splitter.base.BaseTextSplitter.invoke"]],
        "split_document() (ragchain.preprocess.text_splitter.base.basetextsplitter method)": [[10, "RAGchain.preprocess.text_splitter.base.BaseTextSplitter.split_document"]],
        "split_document() (ragchain.preprocess.text_splitter.code_splitter.codesplitter method)": [[10, "RAGchain.preprocess.text_splitter.code_splitter.CodeSplitter.split_document"]],
        "split_document() (ragchain.preprocess.text_splitter.html_header_splitter.htmlheadersplitter method)": [[10, "RAGchain.preprocess.text_splitter.html_header_splitter.HTMLHeaderSplitter.split_document"]],
        "split_document() (ragchain.preprocess.text_splitter.markdown_header_splitter.markdownheadersplitter method)": [[10, "RAGchain.preprocess.text_splitter.markdown_header_splitter.MarkDownHeaderSplitter.split_document"]],
        "split_document() (ragchain.preprocess.text_splitter.text_splitter.recursivetextsplitter method)": [[10, "RAGchain.preprocess.text_splitter.text_splitter.RecursiveTextSplitter.split_document"]],
        "split_document() (ragchain.preprocess.text_splitter.token_splitter.tokensplitter method)": [[10, "RAGchain.preprocess.text_splitter.token_splitter.TokenSplitter.split_document"]],
        "split_documents() (ragchain.preprocess.text_splitter.base.basetextsplitter method)": [[10, "RAGchain.preprocess.text_splitter.base.BaseTextSplitter.split_documents"]],
        "bm25reranker (class in ragchain.reranker.bm25)": [[11, "RAGchain.reranker.bm25.BM25Reranker"]],
        "basereranker (class in ragchain.reranker.base)": [[11, "RAGchain.reranker.base.BaseReranker"]],
        "inputtype (ragchain.reranker.base.basereranker property)": [[11, "RAGchain.reranker.base.BaseReranker.InputType"]],
        "outputtype (ragchain.reranker.base.basereranker property)": [[11, "RAGchain.reranker.base.BaseReranker.OutputType"]],
        "ragchain.reranker": [[11, "module-RAGchain.reranker"]],
        "ragchain.reranker.base": [[11, "module-RAGchain.reranker.base"]],
        "ragchain.reranker.bm25": [[11, "module-RAGchain.reranker.bm25"]],
        "invoke() (ragchain.reranker.bm25.bm25reranker method)": [[11, "RAGchain.reranker.bm25.BM25Reranker.invoke"]],
        "rerank() (ragchain.reranker.base.basereranker method)": [[11, "RAGchain.reranker.base.BaseReranker.rerank"]],
        "rerank() (ragchain.reranker.bm25.bm25reranker method)": [[11, "RAGchain.reranker.bm25.BM25Reranker.rerank"]],
        "ragchain.reranker.importance": [[12, "module-RAGchain.reranker.importance"]],
        "ragchain.reranker.importance.simple_importance": [[12, "module-RAGchain.reranker.importance.simple_importance"]],
        "ragchain.reranker.importance.weighted_importance": [[12, "module-RAGchain.reranker.importance.weighted_importance"]],
        "simpleimportancereranker (class in ragchain.reranker.importance.simple_importance)": [[12, "RAGchain.reranker.importance.simple_importance.SimpleImportanceReranker"]],
        "weightedimportancereranker (class in ragchain.reranker.importance.weighted_importance)": [[12, "RAGchain.reranker.importance.weighted_importance.WeightedImportanceReranker"]],
        "invoke() (ragchain.reranker.importance.simple_importance.simpleimportancereranker method)": [[12, "RAGchain.reranker.importance.simple_importance.SimpleImportanceReranker.invoke"]],
        "invoke() (ragchain.reranker.importance.weighted_importance.weightedimportancereranker method)": [[12, "RAGchain.reranker.importance.weighted_importance.WeightedImportanceReranker.invoke"]],
        "rerank() (ragchain.reranker.importance.simple_importance.simpleimportancereranker method)": [[12, "RAGchain.reranker.importance.simple_importance.SimpleImportanceReranker.rerank"]],
        "rerank() (ragchain.reranker.importance.weighted_importance.weightedimportancereranker method)": [[12, "RAGchain.reranker.importance.weighted_importance.WeightedImportanceReranker.rerank"]],
        "llmreranker (class in ragchain.reranker.llm.llm)": [[13, "RAGchain.reranker.llm.llm.LLMReranker"]],
        "ragchain.reranker.llm": [[13, "module-RAGchain.reranker.llm"]],
        "ragchain.reranker.llm.llm": [[13, "module-RAGchain.reranker.llm.llm"]],
        "ragchain.reranker.llm.rank_gpt": [[13, "module-RAGchain.reranker.llm.rank_gpt"]],
        "safeopenai (class in ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.SafeOpenai"]],
        "chat() (ragchain.reranker.llm.rank_gpt.safeopenai method)": [[13, "RAGchain.reranker.llm.rank_gpt.SafeOpenai.chat"]],
        "clean_response() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.clean_response"]],
        "create_permutation_instruction() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.create_permutation_instruction"]],
        "find_passages() (ragchain.reranker.llm.llm.llmreranker method)": [[13, "RAGchain.reranker.llm.llm.LLMReranker.find_passages"]],
        "get_post_prompt() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.get_post_prompt"]],
        "get_prefix_prompt() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.get_prefix_prompt"]],
        "invoke() (ragchain.reranker.llm.llm.llmreranker method)": [[13, "RAGchain.reranker.llm.llm.LLMReranker.invoke"]],
        "make_item() (ragchain.reranker.llm.llm.llmreranker method)": [[13, "RAGchain.reranker.llm.llm.LLMReranker.make_item"]],
        "make_passages() (ragchain.reranker.llm.llm.llmreranker method)": [[13, "RAGchain.reranker.llm.llm.LLMReranker.make_passages"]],
        "max_tokens() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.max_tokens"]],
        "num_tokens_from_messages() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.num_tokens_from_messages"]],
        "permutation_pipeline() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.permutation_pipeline"]],
        "receive_permutation() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.receive_permutation"]],
        "remove_duplicate() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.remove_duplicate"]],
        "rerank() (ragchain.reranker.llm.llm.llmreranker method)": [[13, "RAGchain.reranker.llm.llm.LLMReranker.rerank"]],
        "rerank_sliding_window() (ragchain.reranker.llm.llm.llmreranker method)": [[13, "RAGchain.reranker.llm.llm.LLMReranker.rerank_sliding_window"]],
        "run_llm() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.run_llm"]],
        "sliding_windows() (in module ragchain.reranker.llm.rank_gpt)": [[13, "RAGchain.reranker.llm.rank_gpt.sliding_windows"]],
        "text() (ragchain.reranker.llm.rank_gpt.safeopenai method)": [[13, "RAGchain.reranker.llm.rank_gpt.SafeOpenai.text"]],
        "monot5 (class in ragchain.reranker.pygaggle.transformer)": [[14, "RAGchain.reranker.pygaggle.transformer.MonoT5"]],
        "monot5reranker (class in ragchain.reranker.pygaggle.monot5)": [[14, "RAGchain.reranker.pygaggle.monoT5.MonoT5Reranker"]],
        "query (class in ragchain.reranker.pygaggle.base)": [[14, "RAGchain.reranker.pygaggle.base.Query"]],
        "ragchain.reranker.pygaggle": [[14, "module-RAGchain.reranker.pygaggle"]],
        "ragchain.reranker.pygaggle.base": [[14, "module-RAGchain.reranker.pygaggle.base"]],
        "ragchain.reranker.pygaggle.monot5": [[14, "module-RAGchain.reranker.pygaggle.monoT5"]],
        "ragchain.reranker.pygaggle.transformer": [[14, "module-RAGchain.reranker.pygaggle.transformer"]],
        "reranker (class in ragchain.reranker.pygaggle.base)": [[14, "RAGchain.reranker.pygaggle.base.Reranker"]],
        "text (class in ragchain.reranker.pygaggle.base)": [[14, "RAGchain.reranker.pygaggle.base.Text"]],
        "get_model() (ragchain.reranker.pygaggle.transformer.monot5 static method)": [[14, "RAGchain.reranker.pygaggle.transformer.MonoT5.get_model"]],
        "get_prediction_tokens() (ragchain.reranker.pygaggle.transformer.monot5 static method)": [[14, "RAGchain.reranker.pygaggle.transformer.MonoT5.get_prediction_tokens"]],
        "get_tokenizer() (ragchain.reranker.pygaggle.transformer.monot5 static method)": [[14, "RAGchain.reranker.pygaggle.transformer.MonoT5.get_tokenizer"]],
        "invoke() (ragchain.reranker.pygaggle.monot5.monot5reranker method)": [[14, "RAGchain.reranker.pygaggle.monoT5.MonoT5Reranker.invoke"]],
        "rerank() (ragchain.reranker.pygaggle.base.reranker method)": [[14, "RAGchain.reranker.pygaggle.base.Reranker.rerank"]],
        "rerank() (ragchain.reranker.pygaggle.monot5.monot5reranker method)": [[14, "RAGchain.reranker.pygaggle.monoT5.MonoT5Reranker.rerank"]],
        "rescore() (ragchain.reranker.pygaggle.base.reranker method)": [[14, "RAGchain.reranker.pygaggle.base.Reranker.rescore"]],
        "rescore() (ragchain.reranker.pygaggle.transformer.monot5 method)": [[14, "RAGchain.reranker.pygaggle.transformer.MonoT5.rescore"]],
        "enct5forsequenceclassification (class in ragchain.reranker.tart.modeling_enc_t5)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification"]],
        "enct5tokenizer (class in ragchain.reranker.tart.tokenization_enc_t5)": [[16, "RAGchain.reranker.tart.tokenization_enc_t5.EncT5Tokenizer"]],
        "ragchain.reranker.tart": [[16, "module-RAGchain.reranker.tart"]],
        "ragchain.reranker.tart.modeling_enc_t5": [[16, "module-RAGchain.reranker.tart.modeling_enc_t5"]],
        "ragchain.reranker.tart.tart": [[16, "module-RAGchain.reranker.tart.tart"]],
        "ragchain.reranker.tart.tokenization_enc_t5": [[16, "module-RAGchain.reranker.tart.tokenization_enc_t5"]],
        "tartreranker (class in ragchain.reranker.tart.tart)": [[16, "RAGchain.reranker.tart.tart.TARTReranker"]],
        "build_inputs_with_special_tokens() (ragchain.reranker.tart.tokenization_enc_t5.enct5tokenizer method)": [[16, "RAGchain.reranker.tart.tokenization_enc_t5.EncT5Tokenizer.build_inputs_with_special_tokens"]],
        "create_token_type_ids_from_sequences() (ragchain.reranker.tart.tokenization_enc_t5.enct5tokenizer method)": [[16, "RAGchain.reranker.tart.tokenization_enc_t5.EncT5Tokenizer.create_token_type_ids_from_sequences"]],
        "deparallelize() (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification method)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.deparallelize"]],
        "forward() (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification method)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.forward"]],
        "get_encoder() (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification method)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.get_encoder"]],
        "get_input_embeddings() (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification method)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.get_input_embeddings"]],
        "get_special_tokens_mask() (ragchain.reranker.tart.tokenization_enc_t5.enct5tokenizer method)": [[16, "RAGchain.reranker.tart.tokenization_enc_t5.EncT5Tokenizer.get_special_tokens_mask"]],
        "invoke() (ragchain.reranker.tart.tart.tartreranker method)": [[16, "RAGchain.reranker.tart.tart.TARTReranker.invoke"]],
        "parallelize() (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification method)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.parallelize"]],
        "rerank() (ragchain.reranker.tart.tart.tartreranker method)": [[16, "RAGchain.reranker.tart.tart.TARTReranker.rerank"]],
        "set_input_embeddings() (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification method)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.set_input_embeddings"]],
        "training (ragchain.reranker.tart.modeling_enc_t5.enct5forsequenceclassification attribute)": [[16, "RAGchain.reranker.tart.modeling_enc_t5.EncT5ForSequenceClassification.training"]],
        "ragchain.reranker.time": [[17, "module-RAGchain.reranker.time"]],
        "ragchain.reranker.time.simple_time": [[17, "module-RAGchain.reranker.time.simple_time"]],
        "ragchain.reranker.time.weighted_time": [[17, "module-RAGchain.reranker.time.weighted_time"]],
        "simpletimereranker (class in ragchain.reranker.time.simple_time)": [[17, "RAGchain.reranker.time.simple_time.SimpleTimeReranker"]],
        "weightedtimereranker (class in ragchain.reranker.time.weighted_time)": [[17, "RAGchain.reranker.time.weighted_time.WeightedTimeReranker"]],
        "invoke() (ragchain.reranker.time.simple_time.simpletimereranker method)": [[17, "RAGchain.reranker.time.simple_time.SimpleTimeReranker.invoke"]],
        "invoke() (ragchain.reranker.time.weighted_time.weightedtimereranker method)": [[17, "RAGchain.reranker.time.weighted_time.WeightedTimeReranker.invoke"]],
        "rerank() (ragchain.reranker.time.simple_time.simpletimereranker method)": [[17, "RAGchain.reranker.time.simple_time.SimpleTimeReranker.rerank"]],
        "rerank() (ragchain.reranker.time.weighted_time.weightedtimereranker method)": [[17, "RAGchain.reranker.time.weighted_time.WeightedTimeReranker.rerank"]],
        "ragchain.reranker.upr": [[18, "module-RAGchain.reranker.upr"]],
        "ragchain.reranker.upr.upr": [[18, "module-RAGchain.reranker.upr.upr"]],
        "uprreranker (class in ragchain.reranker.upr.upr)": [[18, "RAGchain.reranker.upr.upr.UPRReranker"]],
        "calculate_likelihood() (ragchain.reranker.upr.upr.uprreranker method)": [[18, "RAGchain.reranker.upr.upr.UPRReranker.calculate_likelihood"]],
        "invoke() (ragchain.reranker.upr.upr.uprreranker method)": [[18, "RAGchain.reranker.upr.upr.UPRReranker.invoke"]],
        "rerank() (ragchain.reranker.upr.upr.uprreranker method)": [[18, "RAGchain.reranker.upr.upr.UPRReranker.rerank"]],
        "basic_system_prompt (ragchain.retrieval.hyde.hyderetrieval attribute)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval.BASIC_SYSTEM_PROMPT"]],
        "bm25retrieval (class in ragchain.retrieval.bm25_retrieval)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval"]],
        "baseretrieval (class in ragchain.retrieval.base)": [[19, "RAGchain.retrieval.base.BaseRetrieval"]],
        "hyderetrieval (class in ragchain.retrieval.hyde)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval"]],
        "hybridretrieval (class in ragchain.retrieval.hybrid)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval"]],
        "inputtype (ragchain.retrieval.base.baseretrieval property)": [[19, "RAGchain.retrieval.base.BaseRetrieval.InputType"]],
        "inputtype (ragchain.retrieval.base.runnableretrievalingest property)": [[19, "RAGchain.retrieval.base.RunnableRetrievalIngest.InputType"]],
        "outputtype (ragchain.retrieval.base.baseretrieval property)": [[19, "RAGchain.retrieval.base.BaseRetrieval.OutputType"]],
        "outputtype (ragchain.retrieval.base.runnableretrievalingest property)": [[19, "RAGchain.retrieval.base.RunnableRetrievalIngest.OutputType"]],
        "ragchain.retrieval": [[19, "module-RAGchain.retrieval"]],
        "ragchain.retrieval.base": [[19, "module-RAGchain.retrieval.base"]],
        "ragchain.retrieval.bm25_retrieval": [[19, "module-RAGchain.retrieval.bm25_retrieval"]],
        "ragchain.retrieval.hybrid": [[19, "module-RAGchain.retrieval.hybrid"]],
        "ragchain.retrieval.hyde": [[19, "module-RAGchain.retrieval.hyde"]],
        "ragchain.retrieval.vectordb_retrieval": [[19, "module-RAGchain.retrieval.vectordb_retrieval"]],
        "runnableretrievalingest (class in ragchain.retrieval.base)": [[19, "RAGchain.retrieval.base.RunnableRetrievalIngest"]],
        "vectordbretrieval (class in ragchain.retrieval.vectordb_retrieval)": [[19, "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval"]],
        "as_ingest() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.as_ingest"]],
        "create_db() (ragchain.retrieval.base.baseretrieval static method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.create_db"]],
        "delete() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.delete"]],
        "delete() (ragchain.retrieval.bm25_retrieval.bm25retrieval method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.delete"]],
        "delete() (ragchain.retrieval.hybrid.hybridretrieval method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.delete"]],
        "delete() (ragchain.retrieval.hyde.hyderetrieval method)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval.delete"]],
        "delete() (ragchain.retrieval.vectordb_retrieval.vectordbretrieval method)": [[19, "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval.delete"]],
        "duplicate_check() (ragchain.retrieval.base.baseretrieval static method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.duplicate_check"]],
        "fetch_data() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.fetch_data"]],
        "fetch_data_from_db_origin() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.fetch_data_from_db_origin"]],
        "fetch_each_db() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.fetch_each_db"]],
        "ingest() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.ingest"]],
        "ingest() (ragchain.retrieval.bm25_retrieval.bm25retrieval method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.ingest"]],
        "ingest() (ragchain.retrieval.hybrid.hybridretrieval method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.ingest"]],
        "ingest() (ragchain.retrieval.hyde.hyderetrieval method)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval.ingest"]],
        "ingest() (ragchain.retrieval.vectordb_retrieval.vectordbretrieval method)": [[19, "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval.ingest"]],
        "invoke() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.invoke"]],
        "invoke() (ragchain.retrieval.base.runnableretrievalingest method)": [[19, "RAGchain.retrieval.base.RunnableRetrievalIngest.invoke"]],
        "is_created() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.is_created"]],
        "load_data() (ragchain.retrieval.bm25_retrieval.bm25retrieval static method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.load_data"]],
        "min_max_normalization() (ragchain.retrieval.hybrid.hybridretrieval static method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.min_max_normalization"]],
        "persist() (ragchain.retrieval.bm25_retrieval.bm25retrieval method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.persist"]],
        "retrieve() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.retrieve"]],
        "retrieve() (ragchain.retrieval.bm25_retrieval.bm25retrieval method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.retrieve"]],
        "retrieve() (ragchain.retrieval.hybrid.hybridretrieval method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.retrieve"]],
        "retrieve() (ragchain.retrieval.hyde.hyderetrieval method)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval.retrieve"]],
        "retrieve() (ragchain.retrieval.vectordb_retrieval.vectordbretrieval method)": [[19, "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval.retrieve"]],
        "retrieve_id() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.retrieve_id"]],
        "retrieve_id() (ragchain.retrieval.bm25_retrieval.bm25retrieval method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.retrieve_id"]],
        "retrieve_id() (ragchain.retrieval.hybrid.hybridretrieval method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.retrieve_id"]],
        "retrieve_id() (ragchain.retrieval.hyde.hyderetrieval method)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval.retrieve_id"]],
        "retrieve_id() (ragchain.retrieval.vectordb_retrieval.vectordbretrieval method)": [[19, "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval.retrieve_id"]],
        "retrieve_id_with_scores() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.retrieve_id_with_scores"]],
        "retrieve_id_with_scores() (ragchain.retrieval.bm25_retrieval.bm25retrieval method)": [[19, "RAGchain.retrieval.bm25_retrieval.BM25Retrieval.retrieve_id_with_scores"]],
        "retrieve_id_with_scores() (ragchain.retrieval.hybrid.hybridretrieval method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.retrieve_id_with_scores"]],
        "retrieve_id_with_scores() (ragchain.retrieval.hyde.hyderetrieval method)": [[19, "RAGchain.retrieval.hyde.HyDERetrieval.retrieve_id_with_scores"]],
        "retrieve_id_with_scores() (ragchain.retrieval.vectordb_retrieval.vectordbretrieval method)": [[19, "RAGchain.retrieval.vectordb_retrieval.VectorDBRetrieval.retrieve_id_with_scores"]],
        "retrieve_id_with_scores_parallel() (ragchain.retrieval.hybrid.hybridretrieval method)": [[19, "RAGchain.retrieval.hybrid.HybridRetrieval.retrieve_id_with_scores_parallel"]],
        "retrieve_with_filter() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.retrieve_with_filter"]],
        "search_data() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.search_data"]],
        "search_data_from_db_origin() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.search_data_from_db_origin"]],
        "search_each_db() (ragchain.retrieval.base.baseretrieval method)": [[19, "RAGchain.retrieval.base.BaseRetrieval.search_each_db"]],
        "dborigin (class in ragchain.schema.db_origin)": [[20, "RAGchain.schema.db_origin.DBOrigin"]],
        "evaluateresult (class in ragchain.schema.evaluate_result)": [[20, "RAGchain.schema.evaluate_result.EvaluateResult"]],
        "passage (class in ragchain.schema.passage)": [[20, "RAGchain.schema.passage.Passage"]],
        "passage.config (class in ragchain.schema.passage)": [[20, "RAGchain.schema.passage.Passage.Config"]],
        "ragchain.schema": [[20, "module-RAGchain.schema"]],
        "ragchain.schema.db_origin": [[20, "module-RAGchain.schema.db_origin"]],
        "ragchain.schema.evaluate_result": [[20, "module-RAGchain.schema.evaluate_result"]],
        "ragchain.schema.passage": [[20, "module-RAGchain.schema.passage"]],
        "ragchain.schema.prompt": [[20, "module-RAGchain.schema.prompt"]],
        "ragchain.schema.retrieval_result": [[20, "module-RAGchain.schema.retrieval_result"]],
        "ragchainchatprompttemplate (class in ragchain.schema.prompt)": [[20, "RAGchain.schema.prompt.RAGchainChatPromptTemplate"]],
        "ragchainprompttemplate (class in ragchain.schema.prompt)": [[20, "RAGchain.schema.prompt.RAGchainPromptTemplate"]],
        "retrievalresult (class in ragchain.schema.retrieval_result)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult"]],
        "content (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.content"]],
        "content_datetime (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.content_datetime"]],
        "copy() (ragchain.schema.passage.passage method)": [[20, "RAGchain.schema.passage.Passage.copy"]],
        "db_path (ragchain.schema.db_origin.dborigin attribute)": [[20, "RAGchain.schema.db_origin.DBOrigin.db_path"]],
        "db_type (ragchain.schema.db_origin.dborigin attribute)": [[20, "RAGchain.schema.db_origin.DBOrigin.db_type"]],
        "each_results (ragchain.schema.evaluate_result.evaluateresult attribute)": [[20, "RAGchain.schema.evaluate_result.EvaluateResult.each_results"]],
        "extra (ragchain.schema.passage.passage.config attribute)": [[20, "RAGchain.schema.passage.Passage.Config.extra"]],
        "filepath (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.filepath"]],
        "from_documents() (ragchain.schema.passage.passage class method)": [[20, "RAGchain.schema.passage.Passage.from_documents"]],
        "from_search() (ragchain.schema.passage.passage class method)": [[20, "RAGchain.schema.passage.Passage.from_search"]],
        "id (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.id"]],
        "importance (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.importance"]],
        "input_variables (ragchain.schema.prompt.ragchainchatprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainChatPromptTemplate.input_variables"]],
        "input_variables (ragchain.schema.prompt.ragchainprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainPromptTemplate.input_variables"]],
        "is_exactly_same() (ragchain.schema.passage.passage method)": [[20, "RAGchain.schema.passage.Passage.is_exactly_same"]],
        "make_prompts() (ragchain.schema.passage.passage static method)": [[20, "RAGchain.schema.passage.Passage.make_prompts"]],
        "messages (ragchain.schema.prompt.ragchainchatprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainChatPromptTemplate.messages"]],
        "metadata (ragchain.schema.retrieval_result.retrievalresult attribute)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.metadata"]],
        "metadata_etc (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.metadata_etc"]],
        "next_passage_id (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.next_passage_id"]],
        "passages (ragchain.schema.retrieval_result.retrievalresult attribute)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.passages"]],
        "previous_passage_id (ragchain.schema.passage.passage attribute)": [[20, "RAGchain.schema.passage.Passage.previous_passage_id"]],
        "query (ragchain.schema.retrieval_result.retrievalresult attribute)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.query"]],
        "reset_id() (ragchain.schema.passage.passage method)": [[20, "RAGchain.schema.passage.Passage.reset_id"]],
        "results (ragchain.schema.evaluate_result.evaluateresult attribute)": [[20, "RAGchain.schema.evaluate_result.EvaluateResult.results"]],
        "scores (ragchain.schema.retrieval_result.retrievalresult attribute)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.scores"]],
        "slice() (ragchain.schema.retrieval_result.retrievalresult method)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.slice"]],
        "template (ragchain.schema.prompt.ragchainprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainPromptTemplate.template"]],
        "template_format (ragchain.schema.prompt.ragchainprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainPromptTemplate.template_format"]],
        "to_dict() (ragchain.schema.db_origin.dborigin method)": [[20, "RAGchain.schema.db_origin.DBOrigin.to_dict"]],
        "to_dict() (ragchain.schema.passage.passage method)": [[20, "RAGchain.schema.passage.Passage.to_dict"]],
        "to_dict() (ragchain.schema.retrieval_result.retrievalresult method)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.to_dict"]],
        "to_document() (ragchain.schema.passage.passage method)": [[20, "RAGchain.schema.passage.Passage.to_document"]],
        "to_prompt_input() (ragchain.schema.retrieval_result.retrievalresult method)": [[20, "RAGchain.schema.retrieval_result.RetrievalResult.to_prompt_input"]],
        "use_metrics (ragchain.schema.evaluate_result.evaluateresult attribute)": [[20, "RAGchain.schema.evaluate_result.EvaluateResult.use_metrics"]],
        "validate_template (ragchain.schema.prompt.ragchainchatprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainChatPromptTemplate.validate_template"]],
        "validate_template (ragchain.schema.prompt.ragchainprompttemplate attribute)": [[20, "RAGchain.schema.prompt.RAGchainPromptTemplate.validate_template"]],
        "evidenceextractor (class in ragchain.utils.evidence_extractor)": [[21, "RAGchain.utils.evidence_extractor.EvidenceExtractor"]],
        "filecache (class in ragchain.utils.file_cache)": [[21, "RAGchain.utils.file_cache.FileCache"]],
        "filechecker (class in ragchain.utils.util)": [[21, "RAGchain.utils.util.FileChecker"]],
        "inputtype (ragchain.utils.evidence_extractor.evidenceextractor property)": [[21, "RAGchain.utils.evidence_extractor.EvidenceExtractor.InputType"]],
        "inputtype (ragchain.utils.file_cache.filecache property)": [[21, "RAGchain.utils.file_cache.FileCache.InputType"]],
        "outputtype (ragchain.utils.evidence_extractor.evidenceextractor property)": [[21, "RAGchain.utils.evidence_extractor.EvidenceExtractor.OutputType"]],
        "outputtype (ragchain.utils.file_cache.filecache property)": [[21, "RAGchain.utils.file_cache.FileCache.OutputType"]],
        "querydecomposition (class in ragchain.utils.query_decompose)": [[21, "RAGchain.utils.query_decompose.QueryDecomposition"]],
        "ragchain.utils": [[21, "module-RAGchain.utils"]],
        "ragchain.utils.evidence_extractor": [[21, "module-RAGchain.utils.evidence_extractor"]],
        "ragchain.utils.file_cache": [[21, "module-RAGchain.utils.file_cache"]],
        "ragchain.utils.query_decompose": [[21, "module-RAGchain.utils.query_decompose"]],
        "ragchain.utils.rede_search_detector": [[21, "module-RAGchain.utils.rede_search_detector"]],
        "ragchain.utils.semantic_clustering": [[21, "module-RAGchain.utils.semantic_clustering"]],
        "ragchain.utils.util": [[21, "module-RAGchain.utils.util"]],
        "redesearchdetector (class in ragchain.utils.rede_search_detector)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector"]],
        "semanticclustering (class in ragchain.utils.semantic_clustering)": [[21, "RAGchain.utils.semantic_clustering.SemanticClustering"]],
        "batch() (ragchain.utils.evidence_extractor.evidenceextractor method)": [[21, "RAGchain.utils.evidence_extractor.EvidenceExtractor.batch"]],
        "check_type() (ragchain.utils.util.filechecker method)": [[21, "RAGchain.utils.util.FileChecker.check_type"]],
        "cluster() (ragchain.utils.semantic_clustering.semanticclustering method)": [[21, "RAGchain.utils.semantic_clustering.SemanticClustering.cluster"]],
        "decompose() (ragchain.utils.query_decompose.querydecomposition method)": [[21, "RAGchain.utils.query_decompose.QueryDecomposition.decompose"]],
        "decompose_prompt (ragchain.utils.query_decompose.querydecomposition attribute)": [[21, "RAGchain.utils.query_decompose.QueryDecomposition.decompose_prompt"]],
        "delete_duplicate() (ragchain.utils.file_cache.filecache method)": [[21, "RAGchain.utils.file_cache.FileCache.delete_duplicate"]],
        "detect() (ragchain.utils.rede_search_detector.redesearchdetector method)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector.detect"]],
        "evaluate() (ragchain.utils.rede_search_detector.redesearchdetector method)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector.evaluate"]],
        "extract() (ragchain.utils.evidence_extractor.evidenceextractor method)": [[21, "RAGchain.utils.evidence_extractor.EvidenceExtractor.extract"]],
        "find_representation_transform() (ragchain.utils.rede_search_detector.redesearchdetector method)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector.find_representation_transform"]],
        "find_threshold() (ragchain.utils.rede_search_detector.redesearchdetector method)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector.find_threshold"]],
        "invoke() (ragchain.utils.evidence_extractor.evidenceextractor method)": [[21, "RAGchain.utils.evidence_extractor.EvidenceExtractor.invoke"]],
        "invoke() (ragchain.utils.file_cache.filecache method)": [[21, "RAGchain.utils.file_cache.FileCache.invoke"]],
        "invoke() (ragchain.utils.query_decompose.querydecomposition method)": [[21, "RAGchain.utils.query_decompose.QueryDecomposition.invoke"]],
        "is_exist() (ragchain.utils.util.filechecker method)": [[21, "RAGchain.utils.util.FileChecker.is_exist"]],
        "representation_formation() (ragchain.utils.rede_search_detector.redesearchdetector method)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector.representation_formation"]],
        "set_api_base() (in module ragchain.utils.util)": [[21, "RAGchain.utils.util.set_api_base"]],
        "slice_stop_words() (in module ragchain.utils.util)": [[21, "RAGchain.utils.util.slice_stop_words"]],
        "text_modifier() (in module ragchain.utils.util)": [[21, "RAGchain.utils.util.text_modifier"]],
        "train_density_estimation() (ragchain.utils.rede_search_detector.redesearchdetector method)": [[21, "RAGchain.utils.rede_search_detector.RedeSearchDetector.train_density_estimation"]],
        "basecompressor (class in ragchain.utils.compressor.base)": [[22, "RAGchain.utils.compressor.base.BaseCompressor"]],
        "clustertimecompressor (class in ragchain.utils.compressor.cluster_time)": [[22, "RAGchain.utils.compressor.cluster_time.ClusterTimeCompressor"]],
        "inputtype (ragchain.utils.compressor.base.basecompressor property)": [[22, "RAGchain.utils.compressor.base.BaseCompressor.InputType"]],
        "inputtype (ragchain.utils.compressor.llm_lingua.llmlinguacompressor property)": [[22, "RAGchain.utils.compressor.llm_lingua.LLMLinguaCompressor.InputType"]],
        "llmlinguacompressor (class in ragchain.utils.compressor.llm_lingua)": [[22, "RAGchain.utils.compressor.llm_lingua.LLMLinguaCompressor"]],
        "outputtype (ragchain.utils.compressor.base.basecompressor property)": [[22, "RAGchain.utils.compressor.base.BaseCompressor.OutputType"]],
        "outputtype (ragchain.utils.compressor.llm_lingua.llmlinguacompressor property)": [[22, "RAGchain.utils.compressor.llm_lingua.LLMLinguaCompressor.OutputType"]],
        "ragchain.utils.compressor": [[22, "module-RAGchain.utils.compressor"]],
        "ragchain.utils.compressor.base": [[22, "module-RAGchain.utils.compressor.base"]],
        "ragchain.utils.compressor.cluster_time": [[22, "module-RAGchain.utils.compressor.cluster_time"]],
        "ragchain.utils.compressor.llm_lingua": [[22, "module-RAGchain.utils.compressor.llm_lingua"]],
        "compress() (ragchain.utils.compressor.base.basecompressor method)": [[22, "RAGchain.utils.compressor.base.BaseCompressor.compress"]],
        "compress() (ragchain.utils.compressor.cluster_time.clustertimecompressor method)": [[22, "RAGchain.utils.compressor.cluster_time.ClusterTimeCompressor.compress"]],
        "invoke() (ragchain.utils.compressor.base.basecompressor method)": [[22, "RAGchain.utils.compressor.base.BaseCompressor.invoke"]],
        "invoke() (ragchain.utils.compressor.llm_lingua.llmlinguacompressor method)": [[22, "RAGchain.utils.compressor.llm_lingua.LLMLinguaCompressor.invoke"]],
        "chromaslim (class in ragchain.utils.vectorstore.chroma)": [[25, "RAGchain.utils.vectorstore.chroma.ChromaSlim"]],
        "pineconeslim (class in ragchain.utils.vectorstore.pinecone)": [[25, "RAGchain.utils.vectorstore.pinecone.PineconeSlim"]],
        "ragchain.utils.vectorstore": [[25, "module-RAGchain.utils.vectorstore"]],
        "ragchain.utils.vectorstore.base": [[25, "module-RAGchain.utils.vectorstore.base"]],
        "ragchain.utils.vectorstore.chroma": [[25, "module-RAGchain.utils.vectorstore.chroma"]],
        "ragchain.utils.vectorstore.pinecone": [[25, "module-RAGchain.utils.vectorstore.pinecone"]],
        "slimvectorstore (class in ragchain.utils.vectorstore.base)": [[25, "RAGchain.utils.vectorstore.base.SlimVectorStore"]],
        "add_passage() (ragchain.utils.vectorstore.base.slimvectorstore method)": [[25, "RAGchain.utils.vectorstore.base.SlimVectorStore.add_passage"]],
        "add_passages() (ragchain.utils.vectorstore.base.slimvectorstore method)": [[25, "RAGchain.utils.vectorstore.base.SlimVectorStore.add_passages"]],
        "add_passages() (ragchain.utils.vectorstore.chroma.chromaslim method)": [[25, "RAGchain.utils.vectorstore.chroma.ChromaSlim.add_passages"]],
        "add_passages() (ragchain.utils.vectorstore.pinecone.pineconeslim method)": [[25, "RAGchain.utils.vectorstore.pinecone.PineconeSlim.add_passages"]],
        "basewebsearch (class in ragchain.utils.websearch.base)": [[26, "RAGchain.utils.websearch.base.BaseWebSearch"]],
        "bingsearch (class in ragchain.utils.websearch.bing_search)": [[26, "RAGchain.utils.websearch.bing_search.BingSearch"]],
        "googlesearch (class in ragchain.utils.websearch.google_search)": [[26, "RAGchain.utils.websearch.google_search.GoogleSearch"]],
        "inputtype (ragchain.utils.websearch.base.basewebsearch property)": [[26, "RAGchain.utils.websearch.base.BaseWebSearch.InputType"]],
        "outputtype (ragchain.utils.websearch.base.basewebsearch property)": [[26, "RAGchain.utils.websearch.base.BaseWebSearch.OutputType"]],
        "ragchain.utils.websearch": [[26, "module-RAGchain.utils.websearch"]],
        "ragchain.utils.websearch.base": [[26, "module-RAGchain.utils.websearch.base"]],
        "ragchain.utils.websearch.bing_search": [[26, "module-RAGchain.utils.websearch.bing_search"]],
        "ragchain.utils.websearch.google_search": [[26, "module-RAGchain.utils.websearch.google_search"]],
        "batch() (ragchain.utils.websearch.google_search.googlesearch method)": [[26, "RAGchain.utils.websearch.google_search.GoogleSearch.batch"]],
        "get_search_data() (ragchain.utils.websearch.base.basewebsearch method)": [[26, "RAGchain.utils.websearch.base.BaseWebSearch.get_search_data"]],
        "get_search_data() (ragchain.utils.websearch.bing_search.bingsearch method)": [[26, "RAGchain.utils.websearch.bing_search.BingSearch.get_search_data"]],
        "get_search_data() (ragchain.utils.websearch.google_search.googlesearch method)": [[26, "RAGchain.utils.websearch.google_search.GoogleSearch.get_search_data"]],
        "invoke() (ragchain.utils.websearch.base.basewebsearch method)": [[26, "RAGchain.utils.websearch.base.BaseWebSearch.invoke"]]
    }
})